// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.JSSyntaxRegExp = {"": ["_lib1_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = $.regExpMatchStart(m);
  t1 = $.get$length($.index(m, 0));
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib1_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern?", "str", "start", "end", "_groups"],
 "super": "Object",
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
}
};

$$._AllMatchesIterator = {"": ["_re", "_str", "_lib1_next=", "_done"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var next = this._lib1_next;
  this._lib1_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._lib1_next == null))
    return true;
  this._lib1_next = this._re.firstMatch$1(this._str);
  if (this._lib1_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.ArgumentError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'RangeError: ' + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalArgumentException = {"": ["message"],
 "super": "ArgumentError"
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0))
      $.add$1(t1.sb_1, ', ');
    t3 = t1.sb_1;
    t4 = t1.i_2;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    $.add$1(t3, $.NoSuchMethodError_safeToString(t2[t4]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  actualParameters = $.toString(t1.sb_1);
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t2.length; ++i) {
    if (i > 0)
      $.add$1(t1.sb_1, ', ');
    t3 = t1.sb_1;
    if (i >= t2.length)
      throw $.ioore(i);
    $.add$1(t3, t2[i]);
  }
  formalParameters = $.toString(t1.sb_1);
  t2 = this._memberName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer('');
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0))
            $.add$1(t1.sb_1, ', ');
          $.add$1(t1.sb_1, $.NoSuchMethodError_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._memberName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(t1.sb_1) + ']';
      else {
        actualParameters = $.toString(t1.sb_1);
        t1.sb_1 = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t2)); ++i) {
          if (i > 0)
            $.add$1(t1.sb_1, ', ');
          $.add$1(t1.sb_1, $.index(t2, i));
        }
        formalParameters = $.toString(t1.sb_1);
        t2 = this._memberName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: ' + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? 'UnimplementedError: ' + $.S(t1) : 'UnimplementedError';
},
 is$Exception: true
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: ' + this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.Expando = {"": ["name"],
 "super": "Object",
 toString$0: function() {
  return 'Expando:' + $.S(this.name);
},
 operator$index$1: function(object) {
  var values = $.Primitives_getProperty(object, 'expando$values');
  return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
},
 operator$indexSet$2: function(object, value) {
  var values = $.Primitives_getProperty(object, 'expando$values');
  if (values == null) {
    values = $.Object$();
    $.Primitives_setProperty(object, 'expando$values', values);
  }
  $.Primitives_setProperty(values, this._getKey$0(), value);
},
 _getKey$0: function() {
  var key, t1;
  key = $.Primitives_getProperty(this, 'expando$key');
  if (key == null) {
    t1 = $.Expando__keyCount;
    $.Expando__keyCount = $.add(t1, 1);
    key = 'expando$key$' + $.S(t1);
    $.Primitives_setProperty(this, 'expando$key', key);
  }
  return key;
}
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace?"],
 "super": "Object",
 toString$0: function() {
  return 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.replaceAll($.toString(this.source), '\n', '\n  ')) + '\n' + 'original stack trace:\n  ' + $.S($.replaceAll($.toString(this.stackTrace), '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
},
 transform$1: function(transformation) {
  var completer = $.Completer_Completer('dynamic');
  this._forwardException$2(this, completer);
  this.then$1(new $._FutureImpl_transform_anon(completer, transformation));
  return completer.get$future();
},
 get$transform: function() { return new $.BoundClosure(this, 'transform$1'); },
 _forwardException$2: function(future, completer) {
  future.handleException$1(new $._FutureImpl__forwardException_anon(future, completer));
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$._HashMapImpl = {"": ["_keys?", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC);
  t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  t3 = $.get$length(this._keys);
  if (t3 !== (t3 | 0))
    return this._probeForAdding$1$bailout(2, key, t3, t1);
  hash = (t1 & t3 - 1) >>> 0;
  for (insertionIndex = -1, numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._probeForAdding$1$bailout(3, numberOfProbes, key, t1, hash, insertionIndex);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && $.CTC1 === existingKey)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
    if (hash !== (hash | 0))
      return this._probeForAdding$1$bailout(4, insertionIndex, hash, key, numberOfProbes0);
  }
},
 _probeForAdding$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      key = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      key = env0;
      break;
    case 3:
      insertionIndex = env4;
      hash = env3;
      t1 = env2;
      key = env1;
      numberOfProbes = env0;
      break;
    case 4:
      numberOfProbes0 = env3;
      key = env2;
      hash = env1;
      insertionIndex = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (key == null)
        throw $.$$throw($.CTC);
      t1 = $.get$hashCode(key);
    case 1:
      state0 = 0;
      t3 = $.get$length(this._keys);
    case 2:
      state0 = 0;
      hash = $.and(t1, $.sub(t3, 1));
      insertionIndex = -1;
      numberOfProbes = 1;
    default:
      var t1, key, t3, hash, insertionIndex, numberOfProbes, existingKey, numberOfProbes0;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
              t1 = this._keys;
            case 3:
              state0 = 0;
              existingKey = $.index(t1, hash);
              if (existingKey == null) {
                if ($.ltB(insertionIndex, 0))
                  return hash;
                return insertionIndex;
              } else if ($.eqB(existingKey, key))
                return hash;
              else if ($.ltB(insertionIndex, 0) && $.CTC1 === existingKey)
                insertionIndex = hash;
              numberOfProbes0 = numberOfProbes + 1;
              hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
            case 4:
              state0 = 0;
              numberOfProbes = numberOfProbes0;
          }
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC);
  hash = $.and($.get$hashCode(key), $.sub($.get$length(this._keys), 1));
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    existingKey = $.index(this._keys, hash);
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, $.get$length(this._keys));
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, numberOfFree;
  newNumberOfEntries = $.add(this._numberOfEntries, 1);
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1($.mul($.get$length(this._keys), 2));
    return;
  }
  numberOfFree = $.sub($.sub($.get$length(this._keys), newNumberOfEntries), this._numberOfDeleted);
  if ($.gtB(this._numberOfDeleted, numberOfFree))
    this._grow$1($.get$length(this._keys));
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t4, t5, i, key, value, newIndex;
  capacity = $.get$length(this._keys);
  if (typeof capacity !== 'number')
    return this._grow$1$bailout(1, newCapacity, capacity);
  this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
  oldKeys = this._keys;
  if (typeof oldKeys !== 'string' && (typeof oldKeys !== 'object' || oldKeys === null || oldKeys.constructor !== Array && !oldKeys.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(2, newCapacity, capacity, oldKeys);
  oldValues = this._values;
  if (typeof oldValues !== 'string' && (typeof oldValues !== 'object' || oldValues === null || oldValues.constructor !== Array && !oldValues.is$JavaScriptIndexingBehavior()))
    return this._grow$1$bailout(3, newCapacity, oldValues, capacity, oldKeys);
  t4 = $._ListImpl_List(newCapacity, 'dynamic');
  $.setRuntimeTypeInfo(t4, {runtimeType: 'List<dynamic>'});
  this._keys = t4;
  t4 = $._ListImpl_List(newCapacity, $.getRuntimeTypeInfo(this).V);
  t5 = $.getRuntimeTypeInfo(this).V;
  $.setRuntimeTypeInfo(t4, {runtimeType: 'List<' + t5 + '>', 'E': t5});
  this._values = t4;
  for (i = 0; i < capacity; ++i) {
    if (i >= oldKeys.length)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC1)
      continue;
    if (i >= oldValues.length)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    $.indexSet(this._keys, newIndex, key);
    $.indexSet(this._values, newIndex, value);
  }
  this._numberOfDeleted = 0;
},
 _grow$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      capacity = env1;
      newCapacity = env0;
      break;
    case 2:
      oldKeys = env2;
      capacity = env1;
      newCapacity = env0;
      break;
    case 3:
      oldKeys = env3;
      capacity = env2;
      oldValues = env1;
      newCapacity = env0;
      break;
  }
  switch (state0) {
    case 0:
      capacity = $.get$length(this._keys);
    case 1:
      state0 = 0;
      this._loadLimit = $.tdiv($.mul(newCapacity, 3), 4);
      oldKeys = this._keys;
    case 2:
      state0 = 0;
      oldValues = this._values;
    case 3:
      var capacity, newCapacity, oldKeys, oldValues, t4, t5, i, key, value, newIndex;
      state0 = 0;
      t4 = $._ListImpl_List(newCapacity, 'dynamic');
      $.setRuntimeTypeInfo(t4, {runtimeType: 'List<dynamic>'});
      this._keys = t4;
      t4 = $._ListImpl_List(newCapacity, $.getRuntimeTypeInfo(this).V);
      t5 = $.getRuntimeTypeInfo(this).V;
      $.setRuntimeTypeInfo(t4, {runtimeType: 'List<' + t5 + '>', 'E': t5});
      this._values = t4;
      for (i = 0; $.ltB(i, capacity); ++i) {
        key = $.index(oldKeys, i);
        if (key == null || key === $.CTC1)
          continue;
        value = $.index(oldValues, i);
        newIndex = this._probeForAdding$1(key);
        $.indexSet(this._keys, newIndex, key);
        $.indexSet(this._values, newIndex, value);
      }
      this._numberOfDeleted = 0;
  }
},
 clear$0: function() {
  var length$, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  length$ = $.get$length(this._keys);
  if (typeof length$ !== 'number')
    return this.clear$0$bailout(1, length$);
  for (i = 0; i < length$; ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 clear$0$bailout: function(state0, length$) {
  var i;
  for (i = 0; $.ltB(i, length$); ++i) {
    $.indexSet(this._keys, i, null);
    $.indexSet(this._values, i, null);
  }
},
 operator$indexSet$2: function(key, value) {
  var index;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  if ($.index(this._keys, index) == null || $.index(this._keys, index) === $.CTC1)
    this._numberOfEntries = $.add(this._numberOfEntries, 1);
  $.indexSet(this._keys, index, key);
  $.indexSet(this._values, index, value);
},
 operator$index$1: function(key) {
  var index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  return $.index(this._values, index);
},
 remove$1: function(key) {
  var index, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = $.sub(this._numberOfEntries, 1);
    value = $.index(this._values, index);
    $.indexSet(this._values, index, null);
    $.indexSet(this._keys, index, $.CTC1);
    this._numberOfDeleted = $.add(this._numberOfDeleted, 1);
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return $.eq(this._numberOfEntries, 0);
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, key;
  length$ = $.get$length(this._keys);
  if (typeof length$ !== 'number')
    return this.forEach$1$bailout(1, f, length$);
  for (i = 0; i < length$; ++i) {
    key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC1))
      f.call$2(key, $.index(this._values, i));
  }
},
 forEach$1$bailout: function(state0, f, length$) {
  var i, key;
  for (i = 0; $.ltB(i, length$); ++i) {
    key = $.index(this._keys, i);
    if (!(key == null) && !(key === $.CTC1))
      f.call$2(key, $.index(this._values, i));
  }
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  t2 = $.getRuntimeTypeInfo(this).K;
  $.setRuntimeTypeInfo(list, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  t1.i_1 = 0;
  this.forEach$1(new $._HashMapImpl_keys__(t1, list));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  t2 = $.getRuntimeTypeInfo(this).V;
  $.setRuntimeTypeInfo(list, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  t1.i_10 = 0;
  this.forEach$1(new $._HashMapImpl_values__(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  var t1, t2;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  t1 = $._ListImpl_List(8, 'dynamic');
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<dynamic>'});
  this._keys = t1;
  t1 = $._ListImpl_List(8, $.getRuntimeTypeInfo(this).V);
  t2 = $.getRuntimeTypeInfo(this).V;
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  this._values = t1;
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$._KeyValuePair = {"": ["key?", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    $.addLast(this._list, $._KeyValuePair$(key, value, $.getRuntimeTypeInfo(this).K, $.getRuntimeTypeInfo(this).V));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List($.get$length(this), $.getRuntimeTypeInfo(this).K);
  t2 = $.getRuntimeTypeInfo(this).K;
  $.setRuntimeTypeInfo(list, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  t1.index_1 = 0;
  $.forEach(this._list, new $._LinkedHashMapImpl_keys__(t1, list));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List($.get$length(this), $.getRuntimeTypeInfo(this).V);
  t2 = $.getRuntimeTypeInfo(this).V;
  $.setRuntimeTypeInfo(list, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  t1.index_10 = 0;
  $.forEach(this._list, new $._LinkedHashMapImpl_values__(list, t1));
  return list;
},
 forEach$1: function(f) {
  $.forEach(this._list, new $._LinkedHashMapImpl_forEach__(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 clear$0: function() {
  $.clear(this._map);
  $.clear(this._list);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  var t1, t2, t3;
  t1 = $.getRuntimeTypeInfo(this).K;
  t2 = $.getRuntimeTypeInfo(this);
  this._map = $.HashMap_HashMap(t1, 'DoubleLinkedQueueEntry<_KeyValuePair<' + t2.K +', ' + t2.V +'>>');
  t3 = $.getRuntimeTypeInfo(this);
  this._list = $.DoubleLinkedQueue$('_KeyValuePair<' + t3.K +', ' + t3.V +'>');
},
 is$Map: function() { return true; }
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
},
 noSuchMethod$1: function(invocation) {
  throw $.$$throw($.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
},
 get$runtimeType: function() {
  return $.getOrCreateCachedRuntimeType($.getRuntimeTypeString(this));
},
 _probeForLookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForLookup", "_probeForLookup$1", 0, [$0], []));
 },
 removeFirst$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeFirst", "removeFirst$0", 0, [], []));
 },
 $dom_addEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_addEventListener", "$dom_addEventListener$3", 0, [$0, $1, $2], []));
 },
 init$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("init", "init$1", 0, [$0], []));
 },
 getComponent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("getComponent", "getComponent$1", 0, [$0], []));
 },
 charCodeAt$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("charCodeAt", "charCodeAt$1", 0, [$0], []));
 },
 lookup$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("lookup", "lookup$1", 0, [$0], []));
 },
 _getKey$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_getKey", "_getKey$0", 0, [], []));
 },
 lastEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("lastEntry", "lastEntry$0", 0, [], []));
 },
 _ensureCapacity$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_ensureCapacity", "_ensureCapacity$0", 0, [], []));
 },
 _receive$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_receive", "_receive$1", 0, [$0], []));
 },
 process$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("process", "process$0", 0, [], []));
 },
 _registerGameObject$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_registerGameObject", "_registerGameObject$2", 0, [$0, $1], []));
 },
 _registerGameObject$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("_registerGameObject", "_registerGameObject$3", 0, [$0, $1, $2], []));
 },
 _reparentGameObject$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_reparentGameObject", "_reparentGameObject$2", 0, [$0, $1], []));
 },
 containsKey$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("containsKey", "containsKey$1", 0, [$0], []));
 },
 complete$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("complete", "complete$1", 0, [$0], []));
 },
 _forwardException$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_forwardException", "_forwardException$2", 0, [$0, $1], []));
 },
 $dom_appendChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_appendChild", "$dom_appendChild$1", 0, [$0], []));
 },
 firstMatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("firstMatch", "firstMatch$1", 0, [$0], []));
 },
 destroyComponent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("destroyComponent", "destroyComponent$1", 0, [$0], []));
 },
 _deserializeRef$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeRef", "_deserializeRef$1", 0, [$0], []));
 },
 next$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("next", "next$0", 0, [], []));
 },
 remove$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$0", 0, [], []));
 },
 remove$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("remove", "remove$1", 0, [$0], []));
 },
 $dom_removeChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeChild", "$dom_removeChild$1", 0, [$0], []));
 },
 previousEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("previousEntry", "previousEntry$0", 0, [], []));
 },
 allMatches$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("allMatches", "allMatches$1", 0, [$0], []));
 },
 maybeCloseWorker$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("maybeCloseWorker", "maybeCloseWorker$0", 0, [], []));
 },
 _complete$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_complete", "_complete$0", 0, [], []));
 },
 _add_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_1", "_add_1$2", 0, [$0, $1], []));
 },
 _serializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_serializeList", "_serializeList$1", 0, [$0], []));
 },
 _nativeInitWorkerMessageHandler$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeInitWorkerMessageHandler", "_nativeInitWorkerMessageHandler$0", 0, [], []));
 },
 unregister$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("unregister", "unregister$1", 0, [$0], []));
 },
 prepend$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("prepend", "prepend$1", 0, [$0], []));
 },
 _validate$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_validate", "_validate$1", 0, [$0], []));
 },
 _removeFromLiveComponents$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_removeFromLiveComponents", "_removeFromLiveComponents$1", 0, [$0], []));
 },
 add$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("add", "add$1", 0, [$0], []));
 },
 _dispatch$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_dispatch", "_dispatch$1", 0, [$0], []));
 },
 completeException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$1", 0, [$0], []));
 },
 completeException$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("completeException", "completeException$2", 0, [$0, $1], []));
 },
 contains$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$1", 0, [$0], []));
 },
 contains$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("contains", "contains$2", 0, [$0, $1], []));
 },
 runIteration$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("runIteration", "runIteration$0", 0, [], []));
 },
 run$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("run", "run$0", 0, [], []));
 },
 free$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("free", "free$0", 0, [], []));
 },
 addAll$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addAll", "addAll$1", 0, [$0], []));
 },
 getFreeComponent$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("getFreeComponent", "getFreeComponent$0", 0, [], []));
 },
 registerComponentSystem$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("registerComponentSystem", "registerComponentSystem$2", 0, [$0, $1], []));
 },
 _initializeComponents$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_initializeComponents", "_initializeComponents$0", 0, [], []));
 },
 _postMessage_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_2", "_postMessage_2$1", 0, [$0], []));
 },
 postMessage$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("postMessage", "postMessage$1", 0, [$0], []));
 },
 addChild$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addChild", "addChild$1", 0, [$0], []));
 },
 _postMessage_1$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_postMessage_1", "_postMessage_1$2", 0, [$0, $1], []));
 },
 addLast$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("addLast", "addLast$1", 0, [$0], []));
 },
 map$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("map", "map$1", 0, [$0], []));
 },
 on$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("on", "on$1", 0, [$0], []));
 },
 _deserializeHelper$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeHelper", "_deserializeHelper$1", 0, [$0], []));
 },
 _nativeDetectEnvironment$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_nativeDetectEnvironment", "_nativeDetectEnvironment$0", 0, [], []));
 },
 _deserializeMap$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeMap", "_deserializeMap$1", 0, [$0], []));
 },
 _destroyAllComponents$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_destroyAllComponents", "_destroyAllComponents$0", 0, [], []));
 },
 indexOf$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$1", 0, [$0], []));
 },
 indexOf$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("indexOf", "indexOf$2", 0, [$0, $1], []));
 },
 $dom_replaceChild$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_replaceChild", "$dom_replaceChild$2", 0, [$0, $1], []));
 },
 setInterval$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setInterval", "setInterval$2", 0, [$0, $1], []));
 },
 clear$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("clear", "clear$0", 0, [], []));
 },
 createComponent$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("createComponent", "createComponent$2", 0, [$0, $1], []));
 },
 createComponent$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("createComponent", "createComponent$3", 0, [$0, $1, $2], []));
 },
 close$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("close", "close$0", 0, [], []));
 },
 $dom_removeEventListener$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("$dom_removeEventListener", "$dom_removeEventListener$3", 0, [$0, $1, $2], []));
 },
 broadcast$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("broadcast", "broadcast$1", 0, [$0], []));
 },
 broadcast$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("broadcast", "broadcast$2", 0, [$0, $1], []));
 },
 forEach$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("forEach", "forEach$1", 0, [$0], []));
 },
 setTranslation$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("setTranslation", "setTranslation$1", 0, [$0], []));
 },
 _setGlobals$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_setGlobals", "_setGlobals$0", 0, [], []));
 },
 _link$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_link", "_link$2", 0, [$0, $1], []));
 },
 _add_2$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_add_2", "_add_2$1", 0, [$0], []));
 },
 refLocalMatrix$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("refLocalMatrix", "refLocalMatrix$1", 0, [$0], []));
 },
 removeLast$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("removeLast", "removeLast$0", 0, [], []));
 },
 replaceAll$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceAll", "replaceAll$2", 0, [$0, $1], []));
 },
 _grow$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_grow", "_grow$1", 0, [$0], []));
 },
 _runHelper$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_runHelper", "_runHelper$0", 0, [], []));
 },
 then$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("then", "then$1", 0, [$0], []));
 },
 _probeForAdding$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_probeForAdding", "_probeForAdding$1", 0, [$0], []));
 },
 _callback$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$2", 0, [$0, $1], []));
 },
 checkDependencies$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("checkDependencies", "checkDependencies$0", 0, [], []));
 },
 _constructor$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_constructor", "_constructor$0", 0, [], []));
 },
 replaceFirst$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("replaceFirst", "replaceFirst$2", 0, [$0, $1], []));
 },
 handleException$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("handleException", "handleException$1", 0, [$0], []));
 },
 _asNonSentinelEntry$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_asNonSentinelEntry", "_asNonSentinelEntry$0", 0, [], []));
 },
 _getPropertyValue$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_getPropertyValue", "_getPropertyValue$1", 0, [$0], []));
 },
 _advance$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_advance", "_advance$0", 0, [], []));
 },
 attachComponent$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("attachComponent", "attachComponent$1", 0, [$0], []));
 },
 _deserializeList$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_deserializeList", "_deserializeList$1", 0, [$0], []));
 },
 enqueue$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("enqueue", "enqueue$3", 0, [$0, $1, $2], []));
 },
 destroyGameObject$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("destroyGameObject", "destroyGameObject$1", 0, [$0], []));
 },
 register$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("register", "register$2", 0, [$0, $1], []));
 },
 setTimeout$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("setTimeout", "setTimeout$2", 0, [$0, $1], []));
 },
 reset$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("reset", "reset$0", 0, [], []));
 },
 call$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$0", 0, [], []));
 },
 call$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$1", 0, [$0], []));
 },
 call$2: function($0, $1) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$2", 0, [$0, $1], []));
 },
 call$3: function($0, $1, $2) {
  return this.noSuchMethod$1($.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], []));
 },
 eval$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("eval", "eval$1", 0, [$0], []));
 },
 substring$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("substring", "substring$1", 0, [$0], []));
 },
 iterator$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("iterator", "iterator$0", 0, [], []));
 },
 cleanup$0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cleanup", "cleanup$0", 0, [], []));
 },
 _checkReplyTo$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_checkReplyTo", "_checkReplyTo$1", 0, [$0], []));
 },
 startsWith$1: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("startsWith", "startsWith$1", 0, [$0], []));
 },
 get$positionalArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("positionalArguments", "positionalArguments$0", 1, [], []));
 },
 get$_element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_element", "_element$0", 1, [], []));
 },
 get$isWorker: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isWorker", "isWorker$0", 1, [], []));
 },
 get$isGetter: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isGetter", "isGetter$0", 1, [], []));
 },
 get$key: function() {
  return this.noSuchMethod$1($.createInvocationMirror("key", "key$0", 1, [], []));
 },
 get$map: function() {
  return this.noSuchMethod$1($.createInvocationMirror("map", "map$0", 1, [], []));
 },
 get$y: function() {
  return this.noSuchMethod$1($.createInvocationMirror("y", "y$0", 1, [], []));
 },
 get$ignoreCase: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ignoreCase", "ignoreCase$0", 1, [], []));
 },
 get$scene: function() {
  return this.noSuchMethod$1($.createInvocationMirror("scene", "scene$0", 1, [], []));
 },
 get$list: function() {
  return this.noSuchMethod$1($.createInvocationMirror("list", "list$0", 1, [], []));
 },
 get$_workerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_workerId", "_workerId$0", 1, [], []));
 },
 get$_lib2_id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_id", "_lib2_id$0", 1, [], []));
 },
 get$events: function() {
  return this.noSuchMethod$1($.createInvocationMirror("events", "events$0", 1, [], []));
 },
 get$rootContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext", "rootContext$0", 1, [], []));
 },
 get$_set: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_set", "_set$0", 1, [], []));
 },
 get$z: function() {
  return this.noSuchMethod$1($.createInvocationMirror("z", "z$0", 1, [], []));
 },
 get$xyz: function() {
  return this.noSuchMethod$1($.createInvocationMirror("xyz", "xyz$0", 1, [], []));
 },
 get$w: function() {
  return this.noSuchMethod$1($.createInvocationMirror("w", "w$0", 1, [], []));
 },
 get$length: function() {
  return this.noSuchMethod$1($.createInvocationMirror("length", "length$0", 1, [], []));
 },
 get$fromCommandLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("fromCommandLine", "fromCommandLine$0", 1, [], []));
 },
 get$isolates: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isolates", "isolates$0", 1, [], []));
 },
 get$col2: function() {
  return this.noSuchMethod$1($.createInvocationMirror("col2", "col2$0", 1, [], []));
 },
 get$currentManagerId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentManagerId", "currentManagerId$0", 1, [], []));
 },
 get$ports: function() {
  return this.noSuchMethod$1($.createInvocationMirror("ports", "ports$0", 1, [], []));
 },
 get$owner: function() {
  return this.noSuchMethod$1($.createInvocationMirror("owner", "owner$0", 1, [], []));
 },
 get$col1: function() {
  return this.noSuchMethod$1($.createInvocationMirror("col1", "col1$0", 1, [], []));
 },
 get$col0: function() {
  return this.noSuchMethod$1($.createInvocationMirror("col0", "col0$0", 1, [], []));
 },
 get$root: function() {
  return this.noSuchMethod$1($.createInvocationMirror("root", "root$0", 1, [], []));
 },
 get$element: function() {
  return this.noSuchMethod$1($.createInvocationMirror("element", "element$0", 1, [], []));
 },
 get$_next: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_next", "_next$0", 1, [], []));
 },
 get$xy: function() {
  return this.noSuchMethod$1($.createInvocationMirror("xy", "xy$0", 1, [], []));
 },
 get$mainManager: function() {
  return this.noSuchMethod$1($.createInvocationMirror("mainManager", "mainManager$0", 1, [], []));
 },
 get$col3: function() {
  return this.noSuchMethod$1($.createInvocationMirror("col3", "col3$0", 1, [], []));
 },
 get$_childrenToRegister: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_childrenToRegister", "_childrenToRegister$0", 1, [], []));
 },
 get$nextIsolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId", "nextIsolateId$0", 1, [], []));
 },
 get$secretMessage: function() {
  return this.noSuchMethod$1($.createInvocationMirror("secretMessage", "secretMessage$0", 1, [], []));
 },
 get$_lib_data: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_data", "_lib_data$0", 1, [], []));
 },
 get$value: function() {
  return this.noSuchMethod$1($.createInvocationMirror("value", "value$0", 1, [], []));
 },
 get$animation: function() {
  return this.noSuchMethod$1($.createInvocationMirror("animation", "animation$0", 1, [], []));
 },
 get$position: function() {
  return this.noSuchMethod$1($.createInvocationMirror("position", "position$0", 1, [], []));
 },
 get$_callback: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_callback", "_callback$0", 1, [], []));
 },
 get$_receivePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_receivePort", "_receivePort$0", 1, [], []));
 },
 get$navigator: function() {
  return this.noSuchMethod$1($.createInvocationMirror("navigator", "navigator$0", 1, [], []));
 },
 get$hasNext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("hasNext", "hasNext$0", 1, [], []));
 },
 get$cols: function() {
  return this.noSuchMethod$1($.createInvocationMirror("cols", "cols$0", 1, [], []));
 },
 get$managers: function() {
  return this.noSuchMethod$1($.createInvocationMirror("managers", "managers$0", 1, [], []));
 },
 get$_keys: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_keys", "_keys$0", 1, [], []));
 },
 get$id: function() {
  return this.noSuchMethod$1($.createInvocationMirror("id", "id$0", 1, [], []));
 },
 get$memberName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("memberName", "memberName$0", 1, [], []));
 },
 get$pattern: function() {
  return this.noSuchMethod$1($.createInvocationMirror("pattern", "pattern$0", 1, [], []));
 },
 get$data: function() {
  return this.noSuchMethod$1($.createInvocationMirror("data", "data$0", 1, [], []));
 },
 get$simpleName: function() {
  return this.noSuchMethod$1($.createInvocationMirror("simpleName", "simpleName$0", 1, [], []));
 },
 get$namedArguments: function() {
  return this.noSuchMethod$1($.createInvocationMirror("namedArguments", "namedArguments$0", 1, [], []));
 },
 get$currentContext: function() {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext", "currentContext$0", 1, [], []));
 },
 get$_parent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_parent", "_parent$0", 1, [], []));
 },
 get$_lib0_parent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_parent", "_lib0_parent$0", 1, [], []));
 },
 get$_futurePort: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_futurePort", "_futurePort$0", 1, [], []));
 },
 get$isEmpty: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isEmpty", "isEmpty$0", 1, [], []));
 },
 get$topEventLoop: function() {
  return this.noSuchMethod$1($.createInvocationMirror("topEventLoop", "topEventLoop$0", 1, [], []));
 },
 get$type: function() {
  return this.noSuchMethod$1($.createInvocationMirror("type", "type$0", 1, [], []));
 },
 get$needSerialization: function() {
  return this.noSuchMethod$1($.createInvocationMirror("needSerialization", "needSerialization$0", 1, [], []));
 },
 get$isAccessor: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isAccessor", "isAccessor$0", 1, [], []));
 },
 get$future: function() {
  return this.noSuchMethod$1($.createInvocationMirror("future", "future$0", 1, [], []));
 },
 get$_tag: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_tag", "_tag$0", 1, [], []));
 },
 get$_previous: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_previous", "_previous$0", 1, [], []));
 },
 get$x: function() {
  return this.noSuchMethod$1($.createInvocationMirror("x", "x$0", 1, [], []));
 },
 get$rows: function() {
  return this.noSuchMethod$1($.createInvocationMirror("rows", "rows$0", 1, [], []));
 },
 get$userAgent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("userAgent", "userAgent$0", 1, [], []));
 },
 get$keys: function() {
  return this.noSuchMethod$1($.createInvocationMirror("keys", "keys$0", 1, [], []));
 },
 get$_backingMap: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_backingMap", "_backingMap$0", 1, [], []));
 },
 get$multiLine: function() {
  return this.noSuchMethod$1($.createInvocationMirror("multiLine", "multiLine$0", 1, [], []));
 },
 get$_type: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_type", "_type$0", 1, [], []));
 },
 get$duration: function() {
  return this.noSuchMethod$1($.createInvocationMirror("duration", "duration$0", 1, [], []));
 },
 get$values: function() {
  return this.noSuchMethod$1($.createInvocationMirror("values", "values$0", 1, [], []));
 },
 get$transform: function() {
  return this.noSuchMethod$1($.createInvocationMirror("transform", "transform$0", 1, [], []));
 },
 get$parent: function() {
  return this.noSuchMethod$1($.createInvocationMirror("parent", "parent$0", 1, [], []));
 },
 get$stackTrace: function() {
  return this.noSuchMethod$1($.createInvocationMirror("stackTrace", "stackTrace$0", 1, [], []));
 },
 get$_children: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_children", "_children$0", 1, [], []));
 },
 get$isComplete: function() {
  return this.noSuchMethod$1($.createInvocationMirror("isComplete", "isComplete$0", 1, [], []));
 },
 get$children: function() {
  return this.noSuchMethod$1($.createInvocationMirror("children", "children$0", 1, [], []));
 },
 get$_isolateId: function() {
  return this.noSuchMethod$1($.createInvocationMirror("_isolateId", "_isolateId$0", 1, [], []));
 },
 set$map: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("map=", "map=$1", 2, [$0], []));
 },
 set$y: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("y=", "y=$1", 2, [$0], []));
 },
 set$list: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("list=", "list=$1", 2, [$0], []));
 },
 set$enabled: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("enabled=", "enabled=$1", 2, [$0], []));
 },
 set$name: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("name=", "name=$1", 2, [$0], []));
 },
 set$currentContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("currentContext=", "currentContext=$1", 2, [$0], []));
 },
 set$_lib0_parent: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_parent=", "_parent=$1", 2, [$0], []));
 },
 set$_scene: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_scene=", "_scene=$1", 2, [$0], []));
 },
 set$rootContext: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("rootContext=", "rootContext=$1", 2, [$0], []));
 },
 set$xyz: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("xyz=", "xyz=$1", 2, [$0], []));
 },
 set$z: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("z=", "z=$1", 2, [$0], []));
 },
 set$w: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("w=", "w=$1", 2, [$0], []));
 },
 set$length: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("length=", "length=$1", 2, [$0], []));
 },
 set$_previous: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_previous=", "_previous=$1", 2, [$0], []));
 },
 set$x: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("x=", "x=$1", 2, [$0], []));
 },
 set$_owner: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_owner=", "_owner=$1", 2, [$0], []));
 },
 set$text: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("text=", "text=$1", 2, [$0], []));
 },
 set$error: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("error=", "error=$1", 2, [$0], []));
 },
 set$_next: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("_next=", "_next=$1", 2, [$0], []));
 },
 set$nextIsolateId: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("nextIsolateId=", "nextIsolateId=$1", 2, [$0], []));
 },
 set$secretMessage: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("secretMessage=", "secretMessage=$1", 2, [$0], []));
 },
 set$value: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("value=", "value=$1", 2, [$0], []));
 },
 set$position: function($0) {
  return this.noSuchMethod$1($.createInvocationMirror("position=", "position=$1", 2, [$0], []));
 }
};

$$.DoubleLinkedQueueEntry = {"": ["_previous=", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e, $.getRuntimeTypeInfo(this).E)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel.get$_previous().remove$0();
},
 removeFirst$0: function() {
  return this._sentinel.get$_next().remove$0();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length__(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1, t2;
  t1 = this._sentinel;
  t2 = t1.get$_next();
  return t2 == null ? t1 == null : t2 === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1.set$_next(t1);
  t1 = this._sentinel;
  t1.set$_previous(t1);
},
 forEach$1: function(f) {
  var entry, t1, nextEntry;
  entry = this._sentinel.get$_next();
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 map$1: function(f) {
  var other, entry, t1, nextEntry;
  other = $.Queue_Queue('dynamic');
  entry = this._sentinel.get$_next();
  for (; t1 = this._sentinel, !(entry == null ? t1 == null : entry === t1); entry = nextEntry) {
    nextEntry = entry.get$_next();
    $.addLast(other, f.call$1(entry.get$_element()));
  }
  return other;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$($.getRuntimeTypeInfo(this).E);
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._currentEntry.get$_next();
  t2 = this._sentinel;
  return !(t1 == null ? t2 == null : t1 === t2);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._HashSetImpl = {"": ["_backingMap?"],
 "super": "Object",
 clear$0: function() {
  $.clear(this._backingMap);
},
 add$1: function(value) {
  $.indexSet(this._backingMap, value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.forEach(collection, new $._HashSetImpl_addAll__(this));
},
 forEach$1: function(f) {
  $.forEach(this._backingMap, new $._HashSetImpl_forEach__(f));
},
 map$1: function(f) {
  var result = $.Set_Set('dynamic');
  $.forEach(this._backingMap, new $._HashSetImpl_map__(result, f));
  return result;
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.get$isEmpty(this._backingMap);
},
 get$length: function() {
  return $.get$length(this._backingMap);
},
 iterator$0: function() {
  return $._HashSetIterator$(this, $.getRuntimeTypeInfo(this).E);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$($.getRuntimeTypeInfo(this).E, $.getRuntimeTypeInfo(this).E);
},
 is$Collection: function() { return true; }
};

$$._HashSetIterator = {"": ["_entries", "_nextValidIndex"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  if ($.geB(t1, $.get$length(t2)))
    return false;
  if ($.index(t2, this._nextValidIndex) === $.CTC1)
    this._advance$0();
  return $.lt(this._nextValidIndex, $.get$length(t2));
},
 next$0: function() {
  var t1, t3, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._nextValidIndex;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  res = t1[t3];
  this._advance$0();
  return res;
},
 next$0$bailout: function(state0, t1) {
  var res = $.index(t1, this._nextValidIndex);
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, length$, t2, entry;
  t1 = this._entries;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._advance$0$bailout(1, t1);
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CTC1);
},
 _advance$0$bailout: function(state0, t1) {
  var length$, t2, entry;
  length$ = $.get$length(t1);
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if ($.geB(t2, length$))
      break;
    entry = $.index(t1, this._nextValidIndex);
  } while (entry == null || entry === $.CTC1);
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return this._length === 0;
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  this._length = $.add(this._length, $.get$length(str));
  return this;
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.iterator(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  var t1, t2;
  t1 = $._ListImpl_List(null, 'String');
  t2 = 'String';
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  this._buffer = t1;
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.get$length(this._buffer) === 0)
    return '';
  if ($.get$length(this._buffer) === 1)
    return $.index(this._buffer, 0);
  var result = $.stringJoinUnchecked($._StringImpl__toJsStringArray(this._buffer), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ListIterator = {"": ["i", "list="],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.JSInvocationMirror = {"": ["memberName?", "_internalName", "_kind", "_lib3_arguments", "_namedArgumentNames", "_namedIndices"],
 "super": "Object",
 get$isGetter: function() {
  return $.eq(this._kind, 1);
},
 get$isSetter: function() {
  return $.eq(this._kind, 2);
},
 get$isAccessor: function() {
  return !$.eqB(this._kind, 0);
},
 get$positionalArguments: function() {
  var list, t1, t3, t4, argumentCount, index;
  if (this.get$isGetter() === true)
    return;
  list = [];
  t1 = this._lib3_arguments;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.get$positionalArguments$bailout(1, t1, list);
  t3 = t1.length;
  t4 = $.get$length(this._namedArgumentNames);
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  argumentCount = t3 - t4;
  for (index = 0; index < argumentCount; ++index) {
    if (index >= t1.length)
      throw $.ioore(index);
    list.push(t1[index]);
  }
  return list;
},
 get$positionalArguments$bailout: function(state0, t1, list) {
  var argumentCount, index;
  argumentCount = $.sub($.get$length(t1), $.get$length(this._namedArgumentNames));
  for (index = 0; $.ltB(index, argumentCount); ++index)
    list.push($.index(t1, index));
  return list;
},
 get$namedArguments: function() {
  var map, t2, namedArgumentCount, t4, t6, namedArgumentsStartIndex, t1, i, t3, t5;
  if (this.get$isAccessor() === true)
    return;
  map = $.makeLiteralMap([]);
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.get$namedArguments$bailout(1, map);
  t2 = this._namedArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(2, t2, map);
  namedArgumentCount = t2.length;
  t4 = this._lib3_arguments;
  if (typeof t4 !== 'string' && (typeof t4 !== 'object' || t4 === null || t4.constructor !== Array && !t4.is$JavaScriptIndexingBehavior()))
    return this.get$namedArguments$bailout(3, t2, t4, map, namedArgumentCount);
  t6 = t4.length;
  namedArgumentsStartIndex = t6 - namedArgumentCount;
  for (t1 = map.length, i = 0; i < namedArgumentCount; ++i) {
    t3 = t2[i];
    t5 = namedArgumentsStartIndex + i;
    if (t5 < 0 || t5 >= t6)
      throw $.ioore(t5);
    t5 = t4[t5];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1)
      throw $.ioore(t3);
    map[t3] = t5;
  }
  return map;
},
 get$namedArguments$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      map = env0;
      break;
    case 2:
      map = env1;
      t2 = env0;
      break;
    case 3:
      namedArgumentCount = env3;
      map = env2;
      t4 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (this.get$isAccessor() === true)
        return;
      map = $.makeLiteralMap([]);
    case 1:
      state0 = 0;
      t2 = this._namedArgumentNames;
    case 2:
      state0 = 0;
      namedArgumentCount = $.get$length(t2);
      t4 = this._lib3_arguments;
    case 3:
      var map, t2, namedArgumentCount, t4, namedArgumentsStartIndex, i;
      state0 = 0;
      namedArgumentsStartIndex = $.sub($.get$length(t4), namedArgumentCount);
      for (i = 0; $.ltB(i, namedArgumentCount); ++i)
        $.indexSet(map, $.index(t2, i), $.index(t4, $.add(namedArgumentsStartIndex, i)));
      return map;
  }
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.TypeImpl = {"": ["typeName"],
 "super": "Object",
 toString$0: function() {
  return this.typeName;
}
};

$$.MetaInfo = {"": ["_tag?", "_tags", "_set?"],
 "super": "Object"
};

$$.StringMatch = {"": ["start", "str", "pattern?"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
}
};

$$.Clicker = {"": ["_scoreManager", "_transformGraph", "_root", "_idMap", "_data"],
 "super": "Scene",
 Clicker$0: function() {
  var i, t1;
  for (i = 0; i < 100; ++i)
    this.get$root().addChild$1($.Enemy$(null));
  this._scoreManager = $.GameObject$('scoreManager');
  this._scoreManager.attachComponent$1('ScorePrinter');
  this.get$root().addChild$1(this._scoreManager);
  this.set$data($.makeLiteralMap([]));
  t1 = $.makeLiteralMap([]);
  this.get$data().set$map(t1);
  t1 = [1, 2, 3, 4, 5];
  this.get$data().get$map().set$list(t1);
  $.add$1(this.get$data().get$map().get$list(), 6);
  this.get$data().get$map().set$name('Dan');
  $.print($.index(this.get$data().get$map(), 'name'));
  $.print($.index(this.get$data().get$map().get$list(), 5));
  t1 = $.Enemy$('343');
  this.get$data().set$error(t1);
}
};

$$.Enemy = {"": ["_id", "_lib0_parent", "_children", "_data", "_events", "_scene", "_transform", "enabled", "_components", "_componentsToInitialize", "_childrenToRegister"],
 "super": "GameObject",
 Enemy$1: function(id) {
  this.attachComponent$1('MouseEvents');
  this.attachComponent$2('EvadeMouse', [20]);
  this.attachComponent$1('DestroyOnClick');
}
};

$$.EvadeMouse = {"": ["_speed", "_mouseX", "_mouseY", "_type", "enabled", "_owner", "_data", "_componentDependencies"],
 "super": "ScriptComponent",
 init$1: function(params) {
  this._speed = $.index(params, 0);
  this.requireComponent$1('MouseEvents');
  $.add$1(this.get$events().on$1('mouseMove'), this.get$captureMouse());
  this.get$owner().get$data().set$secretMessage('Hi! I am a property!');
},
 captureMouse$1: function(params) {
  this._mouseX = $.index(params, 0);
  this._mouseY = $.index(params, 1);
},
 get$captureMouse: function() { return new $.BoundClosure0(this, 'captureMouse$1'); }
};

$$.DestroyOnClick = {"": ["_type", "enabled", "_owner", "_data", "_componentDependencies"],
 "super": "ScriptComponent",
 init$1: function(params) {
  this.requireComponent$1('MouseEvents');
  $.add$1(this.get$events().on$1('click'), this.get$destroy());
},
 destroy$1: function(params) {
  var message, explosion, t1;
  message = this.get$owner().get$data().get$secretMessage();
  if (!(message == null))
    $.print(message);
  this.get$scene().get$root().get$events().broadcast$1('enemyDestroyed');
  explosion = $.GameObject$(null);
  t1 = this.get$owner().get$transform().get$position().get$xyz();
  explosion.get$transform().set$position(t1);
  this.get$owner().addChild$1(explosion);
  explosion.attachComponent$2('AnimatedMesh', [null]);
  $.window().setTimeout$2(new $.DestroyOnClick_destroy_anon(this), null.get$animation().get$duration());
},
 get$destroy: function() { return new $.BoundClosure1(this, 'destroy$1'); }
};

$$.ScorePrinter = {"": ["_score", "_type", "enabled", "_owner", "_data", "_componentDependencies"],
 "super": "ScriptComponent",
 init$1: function(params) {
  $.add$1(this.get$events().on$1('enemyDestroyed'), this.get$onEnemyDestroyed());
},
 onEnemyDestroyed$1: function(params) {
  this._score = this._score + 10;
  $.print(this._score);
},
 get$onEnemyDestroyed: function() { return new $.BoundClosure2(this, 'onEnemyDestroyed$1'); }
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_lib_type?"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._lib_type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._lib_type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events"
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SVGElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents"
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 get$parent: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.parent);
},
 close$0: function() {
  return this._window.close();
}
};

$$._FixedSizeListIterator = {"": ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map('int', '_IsolateContext');
  this.managers = $.Map_Map('int', '_ManagerStub');
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map('int', 'ReceivePort');
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events?"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer('dynamic');
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(message, this, replyTo));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_lib2_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, replyTo, message));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_lib2_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._lib2_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._lib2_id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ['sendport', x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_lib2_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  var t1 = $._ListImpl_List(null, 'dynamic');
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<dynamic>'});
  this.tagged = t1;
},
 cleanup$0: function() {
  var length$, i;
  length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i, t1;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $._ListImpl_List(len, 'dynamic');
  $.setRuntimeTypeInfo(copy, {runtimeType: 'List<dynamic>'});
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    t1 = this._dispatch$1(list[i]);
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy, len, i, t1;
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = $.get$length(list);
  copy = $._ListImpl_List(len, 'dynamic');
  $.setRuntimeTypeInfo(copy, {runtimeType: 'List<dynamic>'});
  $.indexSet(this._visited, list, copy);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map('dynamic', 'dynamic');
  $.indexSet(this._visited, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i, t1;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $._ListImpl_List(len, 'dynamic');
  $.setRuntimeTypeInfo(result, {runtimeType: 'List<dynamic>'});
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    t1 = this._dispatch$1(list[i]);
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len, result, i, t1;
  len = $.get$length(list);
  result = $._ListImpl_List(len, 'dynamic');
  $.setRuntimeTypeInfo(result, {runtimeType: 'List<dynamic>'});
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap('dynamic', 'dynamic');
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  var len, i;
  $.indexSet(this._deserialized, id, dartList);
  len = $.get$length(dartList);
  for (i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map('dynamic', 'dynamic');
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map('dynamic', 'dynamic');
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      len = $.get$length(keys);
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(this, callback), milliSeconds);
}
};

$$.vec2 = {"": ["x=", "y="],
 "super": "Object",
 toString$0: function() {
  return $.S(this.x) + ',' + $.S(this.y);
},
 operator$sub$1: function(other) {
  return $.vec2$raw($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()));
},
 operator$add$1: function(other) {
  return $.vec2$raw($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$mul$1: function(other) {
  if (typeof other === 'number')
    return $.vec2$raw($.mul(this.x, other), $.mul(this.y, other));
  if (typeof other === 'object' && other !== null && !!other.is$vec2)
    return $.vec2$raw($.mul(this.x, other.x), $.mul(this.y, other.y));
},
 operator$index$1: function(i) {
  switch (i) {
    case 0:
      return this.x;
    case 1:
      return this.y;
  }
  return 0;
},
 operator$indexSet$2: function(i, v) {
  switch (i) {
    case 0:
      this.x = v;
      break;
    case 1:
      this.y = v;
      break;
  }
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
},
 set$xy: function(arg) {
  this.x = arg.get$x();
  this.y = arg.get$y();
},
 get$xy: function() {
  return $.vec2$(this.x, this.y);
},
 add$1: function(arg) {
  this.x = $.add(this.x, arg.get$x());
  this.y = $.add(this.y, arg.get$y());
  return this;
},
 vec2$raw$2: function(x_, y_) {
  this.x = x_;
  this.y = y_;
},
 vec2$2: function(x_, y_) {
  this.y = 0;
  this.x = 0;
  if (typeof x_ === 'object' && x_ !== null && !!x_.is$vec2) {
    this.set$xy(x_.get$xy());
    return;
  }
  if (typeof x_ === 'number' && typeof y_ === 'number') {
    this.x = x_;
    this.y = y_;
    return;
  }
  if (typeof x_ === 'number') {
    this.y = x_;
    this.x = x_;
    return;
  }
  throw $.$$throw($.ArgumentError$('Invalid arguments'));
},
 is$vec2: true
};

$$.vec3 = {"": ["x=", "y=", "z="],
 "super": "Object",
 toString$0: function() {
  return $.S(this.x) + ',' + $.S(this.y) + ',' + $.S(this.z);
},
 operator$sub$1: function(other) {
  return $.vec3$raw($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()), $.sub(this.z, other.get$z()));
},
 operator$add$1: function(other) {
  return $.vec3$raw($.add(this.x, other.get$x()), $.add(this.y, other.get$y()), $.add(this.z, other.get$z()));
},
 operator$mul$1: function(other) {
  if (typeof other === 'number')
    return $.vec3$raw($.mul(this.x, other), $.mul(this.y, other), $.mul(this.z, other));
  if (typeof other === 'object' && other !== null && !!other.is$vec3)
    return $.vec3$raw($.mul(this.x, other.x), $.mul(this.y, other.y), $.mul(this.z, other.z));
},
 operator$index$1: function(i) {
  switch (i) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    case 2:
      return this.z;
  }
  return 0;
},
 operator$indexSet$2: function(i, v) {
  switch (i) {
    case 0:
      this.x = v;
      break;
    case 1:
      this.y = v;
      break;
    case 2:
      this.z = v;
      break;
  }
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.z;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
},
 set$xy: function(arg) {
  this.x = arg.get$x();
  this.y = arg.get$y();
},
 set$yz: function(arg) {
  this.y = arg.get$x();
  this.z = arg.get$y();
},
 set$xyz: function(arg) {
  this.x = arg.get$x();
  this.y = arg.get$y();
  this.z = arg.get$z();
},
 get$xy: function() {
  return $.vec2$(this.x, this.y);
},
 get$xyz: function() {
  return $.vec3$(this.x, this.y, this.z);
},
 add$1: function(arg) {
  this.x = $.add(this.x, arg.get$x());
  this.y = $.add(this.y, arg.get$y());
  this.z = $.add(this.z, arg.get$z());
  return this;
},
 vec3$3: function(x_, y_, z_) {
  this.z = 0;
  this.y = 0;
  this.x = 0;
  if (typeof x_ === 'object' && x_ !== null && !!x_.is$vec2 && typeof y_ === 'number') {
    this.set$xy(x_.get$xy());
    this.z = y_;
  }
  if (typeof x_ === 'number' && typeof y_ === 'object' && y_ !== null && !!y_.is$vec2) {
    this.x = x_;
    this.set$yz(y_.get$xy());
  }
  if (typeof x_ === 'object' && x_ !== null && !!x_.is$vec2 && y_ == null) {
    this.set$xy(x_.get$xy());
    this.z = 0;
  }
  if (typeof x_ === 'object' && x_ !== null && !!x_.is$vec3) {
    this.set$xyz(x_.get$xyz());
    return;
  }
  if (typeof x_ === 'number' && typeof y_ === 'number' && typeof z_ === 'number') {
    this.x = x_;
    this.y = y_;
    this.z = z_;
    return;
  }
  if (typeof x_ === 'number') {
    this.z = x_;
    this.y = x_;
    this.x = x_;
    return;
  }
  throw $.$$throw($.ArgumentError$('Invalid arguments'));
},
 vec3$raw$3: function(x_, y_, z_) {
  this.x = x_;
  this.y = y_;
  this.z = z_;
},
 vec3$zero$0: function() {
  this.x = 0;
  this.y = 0;
  this.z = 0;
},
 is$vec3: true
};

$$.vec4 = {"": ["x=", "y=", "z=", "w="],
 "super": "Object",
 toString$0: function() {
  return $.S(this.x) + ',' + $.S(this.y) + ',' + $.S(this.z) + ',' + $.S(this.w);
},
 operator$sub$1: function(other) {
  return $.vec4$raw($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()), $.sub(this.z, other.get$z()), $.sub(this.w, other.get$w()));
},
 operator$add$1: function(other) {
  return $.vec4$raw($.add(this.x, other.get$x()), $.add(this.y, other.get$y()), $.add(this.z, other.get$z()), $.add(this.w, other.get$w()));
},
 operator$mul$1: function(other) {
  if (typeof other === 'number')
    return $.vec4$raw($.mul(this.x, other), $.mul(this.y, other), $.mul(this.z, other), $.mul(this.w, other));
  if (typeof other === 'object' && other !== null && !!other.is$vec4)
    return $.vec4$raw($.mul(this.x, other.x), $.mul(this.y, other.y), $.mul(this.z, other.z), $.mul(this.w, other.w));
},
 operator$index$1: function(i) {
  switch (i) {
    case 0:
      return this.x;
    case 1:
      return this.y;
    case 2:
      return this.z;
    case 3:
      return this.w;
  }
  return 0;
},
 operator$indexSet$2: function(i, v) {
  switch (i) {
    case 0:
      this.x = v;
      break;
    case 1:
      this.y = v;
      break;
    case 2:
      this.z = v;
      break;
    case 3:
      this.w = v;
      break;
  }
},
 get$length: function() {
  var t1, sum;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum = 0 + t1;
  t1 = this.y;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.z;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  sum += t1;
  t1 = this.w;
  t1 = $.mul(t1, t1);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return $.sqrt(sum + t1);
},
 set$xyz: function(arg) {
  this.x = arg.get$x();
  this.y = arg.get$y();
  this.z = arg.get$z();
},
 get$xy: function() {
  return $.vec2$(this.x, this.y);
},
 get$xyz: function() {
  return $.vec3$(this.x, this.y, this.z);
},
 add$1: function(arg) {
  this.x = $.add(this.x, arg.get$x());
  this.y = $.add(this.y, arg.get$y());
  this.z = $.add(this.z, arg.get$z());
  this.w = $.add(this.w, arg.get$w());
  return this;
},
 vec4$raw$4: function(x_, y_, z_, w_) {
  this.x = x_;
  this.y = y_;
  this.z = z_;
  this.w = w_;
},
 vec4$zero$0: function() {
  this.x = 0;
  this.y = 0;
  this.z = 0;
  this.w = 0;
},
 is$vec4: true
};

$$.mat4 = {"": ["col0?", "col1?", "col2?", "col3?"],
 "super": "Object",
 toString$0: function() {
  return '[0] ' + $.S(this.getRow$1(0)) + '\n' + '[1] ' + $.S(this.getRow$1(1)) + '\n' + '[2] ' + $.S(this.getRow$1(2)) + '\n' + '[3] ' + $.S(this.getRow$1(3)) + '\n';
},
 get$rows: function() {
  return 4;
},
 get$cols: function() {
  return 4;
},
 get$length: function() {
  return 4;
},
 operator$index$1: function(column) {
  switch (column) {
    case 0:
      return this.col0;
    case 1:
      return this.col1;
    case 2:
      return this.col2;
    case 3:
      return this.col3;
  }
  throw $.$$throw($.IllegalArgumentException$(column));
},
 operator$indexSet$2: function(column, arg) {
  switch (column) {
    case 0:
      this.col0 = arg;
      break;
    case 1:
      this.col1 = arg;
      break;
    case 2:
      this.col2 = arg;
      break;
    case 3:
      this.col3 = arg;
      break;
  }
  throw $.$$throw($.IllegalArgumentException$(column));
},
 getRow$1: function(row) {
  var r = $.vec4$zero();
  r.x = $.index(this.col0, row);
  r.y = $.index(this.col1, row);
  r.z = $.index(this.col2, row);
  r.w = $.index(this.col3, row);
  return r;
},
 operator$mul$1: function(arg) {
  var r, t1;
  if (typeof arg === 'number') {
    r = $.mat4$zero();
    t1 = $.mul(this.col0.get$x(), arg);
    r.col0.set$x(t1);
    t1 = $.mul(this.col0.get$y(), arg);
    r.col0.set$y(t1);
    t1 = $.mul(this.col0.get$z(), arg);
    r.col0.set$z(t1);
    t1 = $.mul(this.col0.get$w(), arg);
    r.col0.set$w(t1);
    t1 = $.mul(this.col1.get$x(), arg);
    r.col1.set$x(t1);
    t1 = $.mul(this.col1.get$y(), arg);
    r.col1.set$y(t1);
    t1 = $.mul(this.col1.get$z(), arg);
    r.col1.set$z(t1);
    t1 = $.mul(this.col1.get$w(), arg);
    r.col1.set$w(t1);
    t1 = $.mul(this.col2.get$x(), arg);
    r.col2.set$x(t1);
    t1 = $.mul(this.col2.get$y(), arg);
    r.col2.set$y(t1);
    t1 = $.mul(this.col2.get$z(), arg);
    r.col2.set$z(t1);
    t1 = $.mul(this.col2.get$w(), arg);
    r.col2.set$w(t1);
    t1 = $.mul(this.col3.get$x(), arg);
    r.col3.set$x(t1);
    t1 = $.mul(this.col3.get$y(), arg);
    r.col3.set$y(t1);
    t1 = $.mul(this.col3.get$z(), arg);
    r.col3.set$z(t1);
    t1 = $.mul(this.col3.get$w(), arg);
    r.col3.set$w(t1);
    return r;
  }
  if (typeof arg === 'object' && arg !== null && !!arg.is$vec4) {
    r = $.vec4$zero();
    r.x = $.add($.add($.add($.mul(this.col0.get$x(), arg.x), $.mul(this.col1.get$x(), arg.y)), $.mul(this.col2.get$x(), arg.z)), $.mul(this.col3.get$x(), arg.w));
    r.y = $.add($.add($.add($.mul(this.col0.get$y(), arg.x), $.mul(this.col1.get$y(), arg.y)), $.mul(this.col2.get$y(), arg.z)), $.mul(this.col3.get$y(), arg.w));
    r.z = $.add($.add($.add($.mul(this.col0.get$z(), arg.x), $.mul(this.col1.get$z(), arg.y)), $.mul(this.col2.get$z(), arg.z)), $.mul(this.col3.get$z(), arg.w));
    r.w = $.add($.add($.add($.mul(this.col0.get$w(), arg.x), $.mul(this.col1.get$w(), arg.y)), $.mul(this.col2.get$w(), arg.z)), $.mul(this.col3.get$w(), arg.w));
    return r;
  }
  if (typeof arg === 'object' && arg !== null && !!arg.is$vec3) {
    r = $.vec3$zero();
    r.x = $.add($.add($.add($.mul(this.col0.get$x(), arg.x), $.mul(this.col1.get$x(), arg.y)), $.mul(this.col2.get$x(), arg.z)), this.col3.get$x());
    r.y = $.add($.add($.add($.mul(this.col0.get$y(), arg.x), $.mul(this.col1.get$y(), arg.y)), $.mul(this.col2.get$y(), arg.z)), this.col3.get$y());
    r.z = $.add($.add($.add($.mul(this.col0.get$z(), arg.x), $.mul(this.col1.get$z(), arg.y)), $.mul(this.col2.get$z(), arg.z)), this.col3.get$z());
    return r;
  }
  if (4 === arg.get$rows()) {
    if ($.eqB(arg.get$cols(), 4)) {
      r = $.mat4$zero();
      t1 = $.add($.add($.add($.mul(this.col0.get$x(), arg.get$col0().get$x()), $.mul(this.col1.get$x(), arg.get$col0().get$y())), $.mul(this.col2.get$x(), arg.get$col0().get$z())), $.mul(this.col3.get$x(), arg.get$col0().get$w()));
      r.col0.set$x(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$x(), arg.get$col1().get$x()), $.mul(this.col1.get$x(), arg.get$col1().get$y())), $.mul(this.col2.get$x(), arg.get$col1().get$z())), $.mul(this.col3.get$x(), arg.get$col1().get$w()));
      r.col1.set$x(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$x(), arg.get$col2().get$x()), $.mul(this.col1.get$x(), arg.get$col2().get$y())), $.mul(this.col2.get$x(), arg.get$col2().get$z())), $.mul(this.col3.get$x(), arg.get$col2().get$w()));
      r.col2.set$x(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$x(), arg.get$col3().get$x()), $.mul(this.col1.get$x(), arg.get$col3().get$y())), $.mul(this.col2.get$x(), arg.get$col3().get$z())), $.mul(this.col3.get$x(), arg.get$col3().get$w()));
      r.col3.set$x(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$y(), arg.get$col0().get$x()), $.mul(this.col1.get$y(), arg.get$col0().get$y())), $.mul(this.col2.get$y(), arg.get$col0().get$z())), $.mul(this.col3.get$y(), arg.get$col0().get$w()));
      r.col0.set$y(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$y(), arg.get$col1().get$x()), $.mul(this.col1.get$y(), arg.get$col1().get$y())), $.mul(this.col2.get$y(), arg.get$col1().get$z())), $.mul(this.col3.get$y(), arg.get$col1().get$w()));
      r.col1.set$y(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$y(), arg.get$col2().get$x()), $.mul(this.col1.get$y(), arg.get$col2().get$y())), $.mul(this.col2.get$y(), arg.get$col2().get$z())), $.mul(this.col3.get$y(), arg.get$col2().get$w()));
      r.col2.set$y(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$y(), arg.get$col3().get$x()), $.mul(this.col1.get$y(), arg.get$col3().get$y())), $.mul(this.col2.get$y(), arg.get$col3().get$z())), $.mul(this.col3.get$y(), arg.get$col3().get$w()));
      r.col3.set$y(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$z(), arg.get$col0().get$x()), $.mul(this.col1.get$z(), arg.get$col0().get$y())), $.mul(this.col2.get$z(), arg.get$col0().get$z())), $.mul(this.col3.get$z(), arg.get$col0().get$w()));
      r.col0.set$z(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$z(), arg.get$col1().get$x()), $.mul(this.col1.get$z(), arg.get$col1().get$y())), $.mul(this.col2.get$z(), arg.get$col1().get$z())), $.mul(this.col3.get$z(), arg.get$col1().get$w()));
      r.col1.set$z(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$z(), arg.get$col2().get$x()), $.mul(this.col1.get$z(), arg.get$col2().get$y())), $.mul(this.col2.get$z(), arg.get$col2().get$z())), $.mul(this.col3.get$z(), arg.get$col2().get$w()));
      r.col2.set$z(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$z(), arg.get$col3().get$x()), $.mul(this.col1.get$z(), arg.get$col3().get$y())), $.mul(this.col2.get$z(), arg.get$col3().get$z())), $.mul(this.col3.get$z(), arg.get$col3().get$w()));
      r.col3.set$z(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$w(), arg.get$col0().get$x()), $.mul(this.col1.get$w(), arg.get$col0().get$y())), $.mul(this.col2.get$w(), arg.get$col0().get$z())), $.mul(this.col3.get$w(), arg.get$col0().get$w()));
      r.col0.set$w(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$w(), arg.get$col1().get$x()), $.mul(this.col1.get$w(), arg.get$col1().get$y())), $.mul(this.col2.get$w(), arg.get$col1().get$z())), $.mul(this.col3.get$w(), arg.get$col1().get$w()));
      r.col1.set$w(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$w(), arg.get$col2().get$x()), $.mul(this.col1.get$w(), arg.get$col2().get$y())), $.mul(this.col2.get$w(), arg.get$col2().get$z())), $.mul(this.col3.get$w(), arg.get$col2().get$w()));
      r.col2.set$w(t1);
      t1 = $.add($.add($.add($.mul(this.col0.get$w(), arg.get$col3().get$x()), $.mul(this.col1.get$w(), arg.get$col3().get$y())), $.mul(this.col2.get$w(), arg.get$col3().get$z())), $.mul(this.col3.get$w(), arg.get$col3().get$w()));
      r.col3.set$w(t1);
      return r;
    }
    return;
  }
  throw $.$$throw($.IllegalArgumentException$(arg));
},
 operator$add$1: function(arg) {
  var r, t1;
  r = $.mat4$zero();
  t1 = $.add(this.col0.get$x(), arg.get$col0().get$x());
  r.col0.set$x(t1);
  t1 = $.add(this.col0.get$y(), arg.get$col0().get$y());
  r.col0.set$y(t1);
  t1 = $.add(this.col0.get$z(), arg.get$col0().get$z());
  r.col0.set$z(t1);
  t1 = $.add(this.col0.get$w(), arg.get$col0().get$w());
  r.col0.set$w(t1);
  t1 = $.add(this.col1.get$x(), arg.get$col1().get$x());
  r.col1.set$x(t1);
  t1 = $.add(this.col1.get$y(), arg.get$col1().get$y());
  r.col1.set$y(t1);
  t1 = $.add(this.col1.get$z(), arg.get$col1().get$z());
  r.col1.set$z(t1);
  t1 = $.add(this.col1.get$w(), arg.get$col1().get$w());
  r.col1.set$w(t1);
  t1 = $.add(this.col2.get$x(), arg.get$col2().get$x());
  r.col2.set$x(t1);
  t1 = $.add(this.col2.get$y(), arg.get$col2().get$y());
  r.col2.set$y(t1);
  t1 = $.add(this.col2.get$z(), arg.get$col2().get$z());
  r.col2.set$z(t1);
  t1 = $.add(this.col2.get$w(), arg.get$col2().get$w());
  r.col2.set$w(t1);
  t1 = $.add(this.col3.get$x(), arg.get$col3().get$x());
  r.col3.set$x(t1);
  t1 = $.add(this.col3.get$y(), arg.get$col3().get$y());
  r.col3.set$y(t1);
  t1 = $.add(this.col3.get$z(), arg.get$col3().get$z());
  r.col3.set$z(t1);
  t1 = $.add(this.col3.get$w(), arg.get$col3().get$w());
  r.col3.set$w(t1);
  return r;
},
 operator$sub$1: function(arg) {
  var r, t1;
  r = $.mat4$zero();
  t1 = $.sub(this.col0.get$x(), arg.get$col0().get$x());
  r.col0.set$x(t1);
  t1 = $.sub(this.col0.get$y(), arg.get$col0().get$y());
  r.col0.set$y(t1);
  t1 = $.sub(this.col0.get$z(), arg.get$col0().get$z());
  r.col0.set$z(t1);
  t1 = $.sub(this.col0.get$w(), arg.get$col0().get$w());
  r.col0.set$w(t1);
  t1 = $.sub(this.col1.get$x(), arg.get$col1().get$x());
  r.col1.set$x(t1);
  t1 = $.sub(this.col1.get$y(), arg.get$col1().get$y());
  r.col1.set$y(t1);
  t1 = $.sub(this.col1.get$z(), arg.get$col1().get$z());
  r.col1.set$z(t1);
  t1 = $.sub(this.col1.get$w(), arg.get$col1().get$w());
  r.col1.set$w(t1);
  t1 = $.sub(this.col2.get$x(), arg.get$col2().get$x());
  r.col2.set$x(t1);
  t1 = $.sub(this.col2.get$y(), arg.get$col2().get$y());
  r.col2.set$y(t1);
  t1 = $.sub(this.col2.get$z(), arg.get$col2().get$z());
  r.col2.set$z(t1);
  t1 = $.sub(this.col2.get$w(), arg.get$col2().get$w());
  r.col2.set$w(t1);
  t1 = $.sub(this.col3.get$x(), arg.get$col3().get$x());
  r.col3.set$x(t1);
  t1 = $.sub(this.col3.get$y(), arg.get$col3().get$y());
  r.col3.set$y(t1);
  t1 = $.sub(this.col3.get$z(), arg.get$col3().get$z());
  r.col3.set$z(t1);
  t1 = $.sub(this.col3.get$w(), arg.get$col3().get$w());
  r.col3.set$w(t1);
  return r;
},
 setTranslation$1: function(T) {
  this.col3.set$xyz(T);
},
 add$1: function(o) {
  var t1 = $.add(this.col0.get$x(), o.get$col0().get$x());
  this.col0.set$x(t1);
  t1 = $.add(this.col0.get$y(), o.get$col0().get$y());
  this.col0.set$y(t1);
  t1 = $.add(this.col0.get$z(), o.get$col0().get$z());
  this.col0.set$z(t1);
  t1 = $.add(this.col0.get$w(), o.get$col0().get$w());
  this.col0.set$w(t1);
  t1 = $.add(this.col1.get$x(), o.get$col1().get$x());
  this.col1.set$x(t1);
  t1 = $.add(this.col1.get$y(), o.get$col1().get$y());
  this.col1.set$y(t1);
  t1 = $.add(this.col1.get$z(), o.get$col1().get$z());
  this.col1.set$z(t1);
  t1 = $.add(this.col1.get$w(), o.get$col1().get$w());
  this.col1.set$w(t1);
  t1 = $.add(this.col2.get$x(), o.get$col2().get$x());
  this.col2.set$x(t1);
  t1 = $.add(this.col2.get$y(), o.get$col2().get$y());
  this.col2.set$y(t1);
  t1 = $.add(this.col2.get$z(), o.get$col2().get$z());
  this.col2.set$z(t1);
  t1 = $.add(this.col2.get$w(), o.get$col2().get$w());
  this.col2.set$w(t1);
  t1 = $.add(this.col3.get$x(), o.get$col3().get$x());
  this.col3.set$x(t1);
  t1 = $.add(this.col3.get$y(), o.get$col3().get$y());
  this.col3.set$y(t1);
  t1 = $.add(this.col3.get$z(), o.get$col3().get$z());
  this.col3.set$z(t1);
  t1 = $.add(this.col3.get$w(), o.get$col3().get$w());
  this.col3.set$w(t1);
  return this;
},
 transform$1: function(arg) {
  var x_, y_, z_, w_;
  x_ = $.add($.add($.add($.mul(this.col0.get$x(), arg.get$x()), $.mul(this.col1.get$x(), arg.get$y())), $.mul(this.col2.get$x(), arg.get$z())), $.mul(this.col3.get$x(), arg.get$w()));
  y_ = $.add($.add($.add($.mul(this.col0.get$y(), arg.get$x()), $.mul(this.col1.get$y(), arg.get$y())), $.mul(this.col2.get$y(), arg.get$z())), $.mul(this.col3.get$y(), arg.get$w()));
  z_ = $.add($.add($.add($.mul(this.col0.get$z(), arg.get$x()), $.mul(this.col1.get$z(), arg.get$y())), $.mul(this.col2.get$z(), arg.get$z())), $.mul(this.col3.get$z(), arg.get$w()));
  w_ = $.add($.add($.add($.mul(this.col0.get$w(), arg.get$x()), $.mul(this.col1.get$w(), arg.get$y())), $.mul(this.col2.get$w(), arg.get$z())), $.mul(this.col3.get$w(), arg.get$w()));
  arg.set$x(x_);
  arg.set$y(y_);
  arg.set$z(z_);
  arg.set$w(w_);
  return arg;
},
 get$transform: function() { return new $.BoundClosure(this, 'transform$1'); },
 mat4$zero$0: function() {
  this.col0 = $.vec4$zero();
  this.col1 = $.vec4$zero();
  this.col2 = $.vec4$zero();
  this.col3 = $.vec4$zero();
  this.col0.set$x(0);
  this.col0.set$y(0);
  this.col0.set$z(0);
  this.col0.set$w(0);
  this.col1.set$x(0);
  this.col1.set$y(0);
  this.col1.set$z(0);
  this.col1.set$w(0);
  this.col2.set$x(0);
  this.col2.set$y(0);
  this.col2.set$z(0);
  this.col2.set$w(0);
  this.col3.set$x(0);
  this.col3.set$y(0);
  this.col3.set$z(0);
  this.col3.set$w(0);
},
 mat4$identity$0: function() {
  this.col0 = $.vec4$zero();
  this.col1 = $.vec4$zero();
  this.col2 = $.vec4$zero();
  this.col3 = $.vec4$zero();
  this.col0.set$x(1);
  this.col1.set$y(1);
  this.col2.set$z(1);
  this.col3.set$w(1);
}
};

$$.HandleSystem = {"": ["_handles", "_totalCapacity", "_staticCapacity", "_freeHead", "_dynamicUsed", "_dynamicCapacity"],
 "super": "Object",
 validHandle$1: function(handle) {
  var index, t1, indexHandle;
  index = $.shr(handle, 0) & 1048575;
  if ($.geB(index, this._totalCapacity))
    return false;
  t1 = this._handles;
  if (index >= t1.length)
    throw $.ioore(index);
  indexHandle = t1[index];
  return handle == null ? indexHandle == null : handle === indexHandle;
},
 HandleSystem$2: function(_totalCapacity, _staticCapacity) {
  var t1, t3, t4, i, t2, next, next0;
  t1 = this._totalCapacity;
  if (typeof t1 !== 'number')
    return this.HandleSystem$2$bailout(1, t1);
  t3 = $._ListImpl_List(t1, 'int');
  t4 = 'int';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t4 + '>', 'E': t4});
  this._handles = t3;
  for (i = 0; t2 = this._staticCapacity, i < t2; ++i) {
    t2 = this._handles;
    t3 = $.Handle_makeStaticHandle(i, 0, 0);
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i] = t3;
  }
  this._freeHead = i;
  for (; i < t1; i = next) {
    next = i + 1;
    next0 = next === t1 ? 1048575 : next;
    t3 = this._handles;
    next0 = $.Handle_makeNextPointer(0, next0);
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = next0;
  }
  this._dynamicUsed = 0;
  this._dynamicCapacity = t1 - t2;
},
 HandleSystem$2$bailout: function(state0, t1) {
  var t3, t4, i, t2, next, next0;
  t3 = $._ListImpl_List(t1, 'int');
  t4 = 'int';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t4 + '>', 'E': t4});
  this._handles = t3;
  for (i = 0; t2 = this._staticCapacity, i < t2; ++i) {
    t2 = this._handles;
    t3 = $.Handle_makeStaticHandle(i, 0, 0);
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i] = t3;
  }
  this._freeHead = i;
  for (; $.ltB(i, t1); i = next) {
    next = i + 1;
    next0 = next === t1 ? 1048575 : next;
    t3 = this._handles;
    next0 = $.Handle_makeNextPointer(0, next0);
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = next0;
  }
  this._dynamicUsed = 0;
  this._dynamicCapacity = $.sub(t1, t2);
}
};

$$.Scene = {"": ["_data?"],
 "super": "Object",
 get$root: function() {
  return this._root;
},
 get$data: function() {
  return this._data;
},
 set$data: function(value) {
  this._data = !(typeof value === 'object' && value !== null && !!value.is$PropertyMap) ? $.PropertyMap$from(value) : value;
},
 _registerGameObject$3: function(go, parent$, initializeComponents) {
  var t1, t3, toInitialize, t2;
  if (!(parent$ == null))
    ;
  if (!(go.get$id() == null)) {
    t1 = this._idMap;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this._registerGameObject$3$bailout(1, go, parent$, initializeComponents, t1);
    t3 = go.get$id();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    if (!(t1[t3] == null))
      throw $.$$throw('Trying to register a second game object with the id "' + $.S(go.get$id()) + '" ' + 'to this scene.');
    t1 = this._idMap;
    if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this._registerGameObject$3$bailout(2, go, parent$, initializeComponents, t1);
    t3 = go.get$id();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = go;
  }
  go.set$_scene(this);
  go.set$_lib0_parent(parent$);
  t1 = go.get$id();
  if (typeof t1 !== 'string')
    return this._registerGameObject$3$bailout(3, go, parent$, initializeComponents, t1);
  if (t1 === 'root')
    return;
  $.add$1(parent$.get$_children(), go);
  t1 = go.get$_childrenToRegister();
  if (!(t1 == null)) {
    toInitialize = $.Set_Set$from(t1, 'dynamic');
    for (t1 = $.iterator(go.get$_childrenToRegister()); t1.get$hasNext() === true;)
      $.addAll(toInitialize, this._registerGameObject$3(t1.next$0(), go, false));
    if (initializeComponents !== true)
      return toInitialize;
    else
      for (t1 = $.iterator(toInitialize); t1.get$hasNext() === true;) {
        t2 = t1.next$0();
        t2.checkDependencies$0();
        t2._initializeComponents$0();
      }
  }
  go.checkDependencies$0();
  go._initializeComponents$0();
  return;
},
 _registerGameObject$3$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env3;
      initializeComponents = env2;
      parent$ = env1;
      go = env0;
      break;
    case 2:
      t1 = env3;
      initializeComponents = env2;
      parent$ = env1;
      go = env0;
      break;
    case 3:
      t1 = env3;
      initializeComponents = env2;
      parent$ = env1;
      go = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (!(parent$ == null))
        ;
    default:
      if (state0 === 2 || state0 === 1 || state0 === 0 && !(go.get$id() == null))
        switch (state0) {
          case 0:
            t1 = this._idMap;
          case 1:
            state0 = 0;
            if (!($.index(t1, go.get$id()) == null))
              throw $.$$throw('Trying to register a second game object with the id "' + $.S(go.get$id()) + '" ' + 'to this scene.');
            t1 = this._idMap;
          case 2:
            state0 = 0;
            $.indexSet(t1, go.get$id(), go);
        }
      go.set$_scene(this);
      go.set$_lib0_parent(parent$);
      t1 = go.get$id();
    case 3:
      var t1, initializeComponents, parent$, go, toInitialize, t2;
      state0 = 0;
      if ($.eqB(t1, 'root'))
        return;
      $.add$1(parent$.get$_children(), go);
      t1 = go.get$_childrenToRegister();
      if (!(t1 == null)) {
        toInitialize = $.Set_Set$from(t1, 'dynamic');
        for (t1 = $.iterator(go.get$_childrenToRegister()); t1.get$hasNext() === true;)
          $.addAll(toInitialize, this._registerGameObject$3(t1.next$0(), go, false));
        if (initializeComponents !== true)
          return toInitialize;
        else
          for (t1 = $.iterator(toInitialize); t1.get$hasNext() === true;) {
            t2 = t1.next$0();
            t2.checkDependencies$0();
            t2._initializeComponents$0();
          }
      }
      go.checkDependencies$0();
      go._initializeComponents$0();
      return;
  }
},
 _registerGameObject$2: function(go,parent$) {
  return this._registerGameObject$3(go,parent$,true)
},
 _reparentGameObject$2: function(go, parent$) {
  go.get$parent().get$children().remove$1(go);
  go.set$_lib0_parent(parent$);
  $.add$1(parent$.get$children(), go);
},
 destroyGameObject$1: function(go) {
  var t1, t3;
  for (t1 = $.iterator(go.get$children()); t1.get$hasNext() === true;)
    this.destroyGameObject$1(t1.next$0());
  go._destroyAllComponents$0();
  if (!(go.get$id() == null)) {
    t1 = this._idMap;
    if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
      return this.destroyGameObject$1$bailout(1, go, t1);
    t3 = go.get$id();
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = null;
  }
  go.get$_lib0_parent().get$_children().remove$1(go);
  go.set$_lib0_parent(null);
  go.set$_scene(null);
},
 destroyGameObject$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env1;
      go = env0;
      break;
  }
  switch (state0) {
    case 0:
      for (t1 = $.iterator(go.get$children()); t1.get$hasNext() === true;)
        this.destroyGameObject$1(t1.next$0());
      go._destroyAllComponents$0();
    case 1:
      var t1, go;
      if (state0 === 1 || state0 === 0 && !(go.get$id() == null))
        switch (state0) {
          case 0:
            t1 = this._idMap;
          case 1:
            state0 = 0;
            $.indexSet(t1, go.get$id(), null);
        }
      go.get$_lib0_parent().get$_children().remove$1(go);
      go.set$_lib0_parent(null);
      go.set$_scene(null);
  }
},
 Scene$1: function(maxGameObjects) {
  this._transformGraph = $.TransformGraph$(maxGameObjects);
  this._idMap = $.Map_Map('String', 'GameObject');
  this._root = $.GameObject$('root');
  this._registerGameObject$2(this.get$root(), null);
  this._data = $.PropertyMap$();
}
};

$$.EventListenerSet = {"": ["_listeners"],
 "super": "Object",
 add$1: function(listener) {
  $.add$1(this._listeners, listener);
},
 remove$1: function(listener) {
  this._listeners.remove$1(listener);
},
 _receive$1: function(params) {
  $.forEach(this._listeners, new $.EventListenerSet__receive_anon(params));
},
 EventListenerSet$0: function() {
  this._listeners = $.Set_Set('EventListener');
}
};

$$.EventListenerMap = {"": ["_owner!", "_events"],
 "super": "Object",
 on$1: function(eventName) {
  var listeners = $.index(this._events, eventName);
  if (listeners == null) {
    listeners = $.EventListenerSet$();
    $.indexSet(this._events, eventName, listeners);
  }
  return listeners;
},
 fire$2: function(eventName, params) {
  var listeners = $.index(this._events, eventName);
  if (listeners == null)
    return;
  listeners._receive$1(params);
},
 broadcast$2: function(eventName, params) {
  this.fire$2(eventName, params);
  $.forEach(this._owner.get$children(), new $.EventListenerMap_broadcast_anon(eventName, params));
},
 broadcast$1: function(eventName) {
  return this.broadcast$2(eventName,null)
},
 EventListenerMap$1: function(_owner) {
  this._events = $.Map_Map('String', 'EventListenerSet');
}
};

$$.GameObject = {"": ["_id?", "_lib0_parent=", "_children?", "_data?", "_events", "_scene!", "_transform", "enabled!", "_components", "_componentsToInitialize", "_childrenToRegister?"],
 "super": "Object",
 get$id: function() {
  return this._id;
},
 get$parent: function() {
  return this._lib0_parent;
},
 get$children: function() {
  return this._children;
},
 get$data: function() {
  return this._data;
},
 get$events: function() {
  return this._events;
},
 get$scene: function() {
  return this._scene;
},
 get$transform: function() {
  return this._transform;
},
 getComponent$2: function(type, exactType) {
  var t1, t2;
  for (t1 = $.iterator(this._components); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.eqB(t2.get$_type(), type))
      return t2;
  }
  return;
},
 getComponent$1: function(type) {
  return this.getComponent$2(type,false)
},
 attachComponent$2: function(type, params) {
  var component = $.Game_componentManager().createComponent$3(type, this, params);
  component.set$_owner(this);
  $.add$1(this._components, component);
  if (!(this.get$scene() == null)) {
    component.init$1(params);
    component.checkDependencies$0();
    return component;
  } else {
    if (this._componentsToInitialize == null)
      this._componentsToInitialize = $.Map_Map('dynamic', 'dynamic');
    $.indexSet(this._componentsToInitialize, component, params);
    return component;
  }
},
 attachComponent$1: function(type) {
  return this.attachComponent$2(type,null)
},
 destroyComponent$1: function(component) {
  if ($.contains$1(this._components, component) !== true)
    throw $.$$throw('Trying to remove a component (' + $.S($.get$runtimeType(component)) + ') from a ' + 'game object that does not own it.');
  component.free$0();
  component.set$_owner(null);
  component.set$enabled(false);
  this._components.remove$1(component);
  $.Game_componentManager().destroyComponent$1(component);
  this.checkDependencies$0();
},
 addChild$1: function(go) {
  if (!(go.get$scene() == null))
    ;
  if ($.contains$1(this._children, go) === true || $.contains$1(this._childrenToRegister, go) === true)
    return go;
  if (this.get$scene() == null) {
    if (this._childrenToRegister == null)
      this._childrenToRegister = $.Set_Set('dynamic');
    if ($.contains$1(this._childrenToRegister, go) !== true)
      $.add$1(this._childrenToRegister, go);
  } else if (!(go.get$parent() == null))
    this.get$scene()._reparentGameObject$2(go, this);
  else
    this.get$scene()._registerGameObject$2(go, this);
  return go;
},
 checkDependencies$0: function() {
  for (var t1 = $.iterator(this._components); t1.get$hasNext() === true;)
    t1.next$0().checkDependencies$0();
},
 _initializeComponents$0: function() {
  var t1, t2, t3;
  t1 = this._componentsToInitialize;
  if (!(t1 == null))
    for (t2 = $.iterator(t1.get$keys()); t2.get$hasNext() === true;) {
      t1 = t2.next$0();
      t3 = this._componentsToInitialize;
      if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
        return this._initializeComponents$0$bailout(1, t3, t1, t2);
      if (t1 !== (t1 | 0))
        throw $.iae(t1);
      if (t1 < 0 || t1 >= t3.length)
        throw $.ioore(t1);
      t1.init$1(t3[t1]);
    }
},
 _initializeComponents$0$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t2 = env2;
      t1 = env1;
      t3 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this._componentsToInitialize;
    case 1:
      var t1, t2, t3;
      if (state0 === 1 || state0 === 0 && !(t1 == null))
        switch (state0) {
          case 0:
            t2 = $.iterator(t1.get$keys());
          case 1:
            L0:
              while (true)
                switch (state0) {
                  case 0:
                    if (!(t2.get$hasNext() === true))
                      break L0;
                    t1 = t2.next$0();
                    t3 = this._componentsToInitialize;
                  case 1:
                    state0 = 0;
                    t1.init$1($.index(t3, t1));
                }
        }
  }
},
 _destroyAllComponents$0: function() {
  var t1;
  for (t1 = $._ListImpl_List$from(this._components, 'dynamic'), $.setRuntimeTypeInfo(t1, {runtimeType: 'List<dynamic>'}), t1 = $.iterator(t1); t1.get$hasNext() === true;) {
    this.destroyComponent$1(t1.next$0());
    this._componentsToInitialize = null;
  }
},
 GameObject$1: function(_id) {
  this._lib0_parent = null;
  this._children = $.Set_Set('GameObject');
  this._childrenToRegister = $.Set_Set('GameObject');
  this._data = $.PropertyMap$();
  this._components = $.Set_Set('dynamic');
  this._events = $.EventListenerMap$(this);
}
};

$$.Component = {"": ["_type?", "enabled!", "_owner!", "_data?"],
 "super": "Object",
 get$type: function() {
  return this._type;
},
 get$owner: function() {
  return this._owner;
},
 get$data: function() {
  return this._data;
},
 get$events: function() {
  return this.get$owner().get$events();
},
 get$transform: function() {
  return this.get$owner().get$transform();
},
 get$scene: function() {
  return this.get$owner().get$scene();
},
 init$1: function(params) {
},
 free$0: function() {
},
 requireComponent$1: function(type) {
  var t1 = this._componentDependencies;
  if ($.eqB($.contains$1(t1, type), false))
    $.add$1(t1, type);
},
 checkDependencies$0: function() {
  var t1, t2;
  for (t1 = $.iterator(this._componentDependencies); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (this.get$owner().getComponent$1(t2) == null)
      throw $.$$throw('Failed component dependency test. Component: ' + $.S(this.get$type()) + ' requires' + 'at least component of type ' + $.S(t2));
  }
  return true;
}
};

$$.ComponentPool = {"": ["_freeList", "_constructor"],
 "super": "Object",
 _constructor$0: function() { return this._constructor.call$0(); },
 getFreeComponent$0: function() {
  if ($.gtB($.get$length(this._freeList), 0))
    return $.removeLast(this._freeList);
  return this._constructor$0();
},
 add$1: function(component) {
  $.add$1(this._freeList, component);
},
 ComponentPool$1: function(_constructor) {
  var t1, t2;
  t1 = $._ListImpl_List(null, $.getRuntimeTypeInfo(this).E);
  t2 = $.getRuntimeTypeInfo(this).E;
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  this._freeList = t1;
}
};

$$.ComponentSystem = {"": ["_componentPool", "_liveComponents"],
 "super": "Object",
 createComponent$2: function(owner, params) {
  var component = this._componentPool.getFreeComponent$0();
  $.add$1(this._liveComponents, component);
  return component;
},
 destroyComponent$1: function(component) {
  if (component == null)
    return;
  this._removeFromLiveComponents$1(component);
  this._componentPool.add$1(component);
  return;
},
 _removeFromLiveComponents$1: function(component) {
  var index, last, t1;
  index = $.indexOf$1(this._liveComponents, component);
  last = $.sub($.get$length(this._liveComponents), 1);
  t1 = this._liveComponents;
  $.indexSet(t1, index, $.index(t1, last));
  $.removeLast(this._liveComponents);
},
 ComponentSystem$1: function(_componentPool) {
  var t1, t2;
  t1 = $._ListImpl_List(null, $.getRuntimeTypeInfo(this).T);
  t2 = $.getRuntimeTypeInfo(this).T;
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<' + t2 + '>', 'E': t2});
  this._liveComponents = t1;
}
};

$$.ComponentManager = {"": ["_systems"],
 "super": "Object",
 createComponent$3: function(type, owner, params) {
  return this.getSystemForType$1(type).createComponent$2(owner, params);
},
 createComponent$2: function(type,owner) {
  return this.createComponent$3(type,owner,null)
},
 destroyComponent$1: function(component) {
  this.getSystemForType$1(component.get$type()).destroyComponent$1(component);
},
 getSystemForType$1: function(type) {
  var s = $.index(this._systems, type);
  if (s == null)
    throw $.$$throw($.ArgumentError$('Unknown type: ' + $.S(type)));
  return s;
},
 registerComponentSystem$2: function(typeName, system) {
  $.indexSet(this._systems, typeName, system);
},
 ComponentManager$0: function() {
  this._systems = $.Map_Map('String', 'ComponentSystem');
}
};

$$.PropertyContainer = {"": [],
 "super": "Object",
 _validate$1: function(value) {
  return $.PropertyContainer_validate(value);
},
 is$Serializable: true
};

$$.PropertyMap = {"": ["_objectData"],
 "super": "PropertyContainer",
 containsKey$1: function(key) {
  return this._objectData.containsKey$1(key);
},
 forEach$1: function(func) {
  return $.forEach(this._objectData, func);
},
 get$keys: function() {
  return this._objectData.get$keys();
},
 get$values: function() {
  return this._objectData.get$values();
},
 get$length: function() {
  return $.get$length(this._objectData);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._objectData);
},
 clear$0: function() {
  return $.clear(this._objectData);
},
 remove$1: function(key) {
  return this._objectData.remove$1(key);
},
 operator$index$1: function(key) {
  return $.index(this._objectData, key);
},
 operator$indexSet$2: function(key, value) {
  $.indexSet(this._objectData, key, this._validate$1(value));
},
 noSuchMethod$1: function(mirror) {
  var property;
  if ($.startsWith(mirror.get$memberName(), 'get:') === true) {
    property = $.replaceFirst(mirror.get$memberName(), 'get:', '');
    if (this.containsKey$1(property) === true)
      return this.operator$index$1(property);
  } else if ($.startsWith(mirror.get$memberName(), 'set:') === true) {
    property = $.replaceFirst(mirror.get$memberName(), 'set:', '');
    this.operator$indexSet$2(property, $.index(mirror.get$positionalArguments(), 0));
    return this.operator$index$1(property);
  }
  $.print('Not found: ' + $.S(mirror.get$memberName()));
  $.print('IsGetter: ' + $.S(mirror.get$isGetter()));
  $.print('IsSetter: ' + $.S(mirror.get$isGetter()));
  $.print('isAccessor: ' + $.S(mirror.get$isAccessor()));
  $.Object.prototype.noSuchMethod$1.call(this, mirror);
},
 PropertyMap$from$1: function(other) {
  var t1, t2, t3;
  this._objectData = $.Map_Map$from(other, 'dynamic', 'dynamic');
  for (t1 = $.iterator(this._objectData.get$keys()); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t3 = this._objectData;
    $.indexSet(t3, t2, this._validate$1($.index(t3, t2)));
  }
},
 PropertyMap$0: function() {
  this._objectData = $.Map_Map('String', 'Dynamic_');
},
 is$PropertyMap: true,
 is$Map: function() { return true; }
};

$$.PropertyList = {"": ["_objectData"],
 "super": "PropertyContainer",
 forEach$1: function(func) {
  return $.forEach(this._objectData, func);
},
 get$length: function() {
  return $.get$length(this._objectData);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._objectData);
},
 clear$0: function() {
  return $.clear(this._objectData);
},
 map$1: function(f) {
  return $.map(this._objectData, f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 contains$1: function(element) {
  return $.contains$1(this._objectData, element);
},
 iterator$0: function() {
  return $.iterator(this._objectData);
},
 set$length: function(value) {
  $.set$length(this._objectData, value);
},
 add$1: function(value) {
  return $.add$1(this._objectData, value);
},
 addLast$1: function(value) {
  return $.addLast(this._objectData, value);
},
 addAll$1: function(collection) {
  return $.addAll(this._objectData, collection);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._objectData, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  return $.removeLast(this._objectData);
},
 operator$index$1: function(index) {
  return $.index(this._objectData, index);
},
 operator$indexSet$2: function(index, value) {
  $.indexSet(this._objectData, index, this._validate$1(value));
},
 PropertyList$from$1: function(other) {
  var t1, i;
  t1 = $._ListImpl_List$from(other, 'dynamic');
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<dynamic>'});
  this._objectData = t1;
  for (i = 0; $.ltB(i, $.get$length(this._objectData)); ++i) {
    t1 = this._objectData;
    $.indexSet(t1, i, this._validate$1($.index(t1, i)));
  }
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.MouseEvents = {"": ["_type", "enabled", "_owner", "_data", "_componentDependencies"],
 "super": "Component",
 MouseEvents$0: function() {
  this._type = 'MouseEvents';
}
};

$$.ScriptComponent = {"": [],
 "super": "Component",
 init$1: function(params) {
},
 free$0: function() {
},
 ScriptComponent$1: function(type) {
  this._type = type;
}
};

$$.Transform = {"": ["graph", "node", "_type", "enabled", "_owner", "_data", "_componentDependencies"],
 "super": "Component",
 set$position: function(x) {
  this.graph.refLocalMatrix$1(this.node).setTranslation$1(x);
},
 get$position: function() {
  this.graph.refLocalMatrix$1(this.node).get$col3().get$xyz();
},
 Transform$0: function() {
  this._type = 'Transform';
}
};

$$._InstanceMirror = {"": ["reflectee"],
 "super": "InstanceMirror",
 get$type: function() {
  var className, constructor$, mirror;
  className = $.Primitives_objectTypeName(this.reflectee);
  constructor$ = $.Primitives_getConstructor(className);
  mirror = $.index($.get$_InstanceMirror_classMirrors(), constructor$);
  if (mirror == null) {
    mirror = $._ClassMirror$(className, constructor$);
    $.indexSet($.get$_InstanceMirror_classMirrors(), constructor$, mirror);
  }
  return mirror;
},
 toString$0: function() {
  return 'InstanceMirror(' + $.S(this.reflectee) + ')';
},
 _InstanceMirror$1: function(reflectee) {
  $._ensureEnabled();
}
};

$$._ClassMirror = {"": ["_name", "_jsConstructor"],
 "super": "ClassMirror",
 toString$0: function() {
  return 'ClassMirror(' + $.S(this._name) + ')';
},
 _ClassMirror$2: function(_name, _jsConstructor) {
  $._ensureEnabled();
}
};

$$.InstanceMirror = {"": [],
 "super": "Object"
};

$$.ClassMirror = {"": [],
 "super": "Object"
};

$$._TransformGraphNode = {"": ["parentId", "childCount", "childCountSort", "selfId"],
 "super": "Object",
 reset$0: function() {
  this.parentId = 0;
  this.childCount = 0;
  this.childCountSort = 0;
  this.selfId = 0;
}
};

$$.TransformGraph = {"": ["_handleSystem", "_localTransforms", "_worldTransforms", "_worldTransformArrays", "_nodes", "_sortedNodes", "_sortedNodesCursor", "_nodeCount", "_maxNodes"],
 "super": "Object",
 refLocalMatrix$1: function(nodeHandle) {
  var index, t1;
  if ($.eqB(this._handleSystem.validHandle$1(nodeHandle), false))
    return;
  index = $.Handle_getIndex(nodeHandle);
  t1 = this._localTransforms;
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 TransformGraph$1: function(_maxNodes) {
  var t1, t3, t4, t5, t6, t7, t8, i, t2;
  t1 = this._maxNodes;
  if (typeof t1 !== 'number')
    return this.TransformGraph$1$bailout(1, t1);
  this._handleSystem = $.HandleSystem$(t1, 0);
  t3 = $._ListImpl_List(t1, 'mat4');
  t4 = 'mat4';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t4 + '>', 'E': t4});
  this._localTransforms = t3;
  t3 = $._ListImpl_List(t1, 'mat4');
  t5 = 'mat4';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t5 + '>', 'E': t5});
  this._worldTransforms = t3;
  t3 = $._ListImpl_List(t1, 'Float32Array');
  t6 = 'Float32Array';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t6 + '>', 'E': t6});
  this._worldTransformArrays = t3;
  t3 = $._ListImpl_List(t1, '_TransformGraphNode');
  t7 = '_TransformGraphNode';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t7 + '>', 'E': t7});
  this._nodes = t3;
  t3 = $._ListImpl_List(t1, 'int');
  t8 = 'int';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t8 + '>', 'E': t8});
  this._sortedNodes = t3;
  this._sortedNodesCursor = 0;
  this._nodeCount = 0;
  for (i = 0; i < t1; ++i) {
    t2 = this._localTransforms;
    t3 = $.mat4$identity();
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i] = t3;
    t3 = this._worldTransforms;
    t2 = $.mat4$identity();
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = t2;
    t2 = this._worldTransformArrays;
    t3 = $.Float32Array_Float32Array(16);
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i] = t3;
    t3 = this._nodes;
    t2 = $._TransformGraphNode$();
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = t2;
    t2 = this._nodes;
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i].reset$0();
  }
},
 TransformGraph$1$bailout: function(state0, t1) {
  var t3, t4, t5, t6, t7, t8, i, t2;
  this._handleSystem = $.HandleSystem$(t1, 0);
  t3 = $._ListImpl_List(t1, 'mat4');
  t4 = 'mat4';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t4 + '>', 'E': t4});
  this._localTransforms = t3;
  t3 = $._ListImpl_List(t1, 'mat4');
  t5 = 'mat4';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t5 + '>', 'E': t5});
  this._worldTransforms = t3;
  t3 = $._ListImpl_List(t1, 'Float32Array');
  t6 = 'Float32Array';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t6 + '>', 'E': t6});
  this._worldTransformArrays = t3;
  t3 = $._ListImpl_List(t1, '_TransformGraphNode');
  t7 = '_TransformGraphNode';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t7 + '>', 'E': t7});
  this._nodes = t3;
  t3 = $._ListImpl_List(t1, 'int');
  t8 = 'int';
  $.setRuntimeTypeInfo(t3, {runtimeType: 'List<' + t8 + '>', 'E': t8});
  this._sortedNodes = t3;
  this._sortedNodesCursor = 0;
  this._nodeCount = 0;
  for (i = 0; $.ltB(i, t1); ++i) {
    t2 = this._localTransforms;
    t3 = $.mat4$identity();
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i] = t3;
    t3 = this._worldTransforms;
    t2 = $.mat4$identity();
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = t2;
    t2 = this._worldTransformArrays;
    t3 = $.Float32Array_Float32Array(16);
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i] = t3;
    t3 = this._nodes;
    t2 = $._TransformGraphNode$();
    if (i >= t3.length)
      throw $.ioore(i);
    t3[i] = t2;
    t2 = this._nodes;
    if (i >= t2.length)
      throw $.ioore(i);
    t2[i].reset$0();
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["writeSlot_8", "readSlot_7", "findSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_6.call$1(e);
    t1.copy_1 = this.readSlot_7.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_8.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_6.call$1(e);
    t2 = this.readSlot_7;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_8.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_8;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, elementCopy, length$, copy, slot, i);
          for (t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$('structured clone of other type'));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      i = env6;
      slot = env5;
      copy = env4;
      length$ = env3;
      elementCopy = env2;
      t3 = env1;
      e = env0;
      break;
    case 3:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_6.call$1(e);
        t1.copy_1 = this.readSlot_7.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_8.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, copy, t3, i, element, elementCopy, j;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.get$length(e);
            slot = this.findSlot_6.call$1(e);
            t2 = this.readSlot_7;
            copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_8.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_8;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$('structured clone of other type'));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"": ["visiting_3", "result_2", "box_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_2, ', ');
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._HashSetImpl_map__ = {"": ["result_1", "f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  $.add$1(this.result_1, this.f_0.call$1(key));
}
};

$$._HashSetImpl_forEach__ = {"": ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.box_0;
  if ($.gtB(t1.i_2, 0))
    $.add$1(t1.sb_1, ', ');
  $.add$1(t1.sb_1, key);
  $.add$1(t1.sb_1, ': ');
  $.add$1(t1.sb_1, $.NoSuchMethodError_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.DoubleLinkedQueue_length__ = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._LinkedHashMapImpl_forEach__ = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.keys_0, k);
}
};

$$._HashMapImpl_keys__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._LinkedHashMapImpl_keys__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._HashMapImpl__HashMapImpl$from_anon = {"": ["result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  $.indexSet(this.result_0, key, value);
}
};

$$._HashSetImpl_addAll__ = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["arg2_5", "closure_4", "arg1_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_4.call$2(this.arg1_3, this.arg2_5);
}
};

$$.DestroyOnClick_destroy_anon = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_0;
  t1.get$scene().destroyGameObject$1(t1.get$owner());
}
};

$$.EventListenerMap_broadcast_anon = {"": ["eventName_1", "params_0"],
 "super": "Closure",
 call$1: function(go) {
  go.get$events().broadcast$2(this.eventName_1, this.params_0);
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"": ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_0;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_1, null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"": ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_2, i);
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"": ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_3, i, x);
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"": ["readSlot_7", "findSlot_6", "mustCopy_5", "writeSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  var slot, copy, t1, t2, t3, length$, i;
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout(1, e);
  if (e instanceof Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (e instanceof RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (Object.getPrototypeOf(e) === Object.prototype) {
    slot = this.findSlot_6.call$1(e);
    copy = this.readSlot_7.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(2, e, copy, slot);
    this.writeSlot_4.call$2(slot, copy);
    for (t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_6.call$1(e);
    copy = this.readSlot_7.call$1(slot);
    if (!(copy == null))
      return copy;
    length$ = e.length;
    if (this.mustCopy_5 === true)
      copy = new Array(length$);
    else
      copy = e;
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, length$, copy, slot);
    this.writeSlot_4.call$2(slot, copy);
    for (i = 0; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  return e;
},
 call$1$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      slot = env2;
      copy = env1;
      e = env0;
      break;
    case 3:
      slot = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (e instanceof RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
    case 2:
      if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
        switch (state0) {
          case 0:
            slot = this.findSlot_6.call$1(e);
            copy = this.readSlot_7.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state0 = 0;
            this.writeSlot_4.call$2(slot, copy);
            for (t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
              t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 3:
      var e, slot, copy, t1, t2, length$, i;
      if (state0 === 3 || state0 === 0 && e instanceof Array)
        switch (state0) {
          case 0:
            slot = this.findSlot_6.call$1(e);
            copy = this.readSlot_7.call$1(slot);
            if (!(copy == null))
              return copy;
            length$ = $.get$length(e);
            copy = this.mustCopy_5 === true ? new Array(length$) : e;
          case 3:
            state0 = 0;
            this.writeSlot_4.call$2(slot, copy);
            for (i = 0; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      return e;
  }
}
};

$$.EventListenerSet__receive_anon = {"": ["params_0"],
 "super": "Closure",
 call$1: function(l) {
  l.call$1(this.params_0);
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["this_2", "replyTo_1", "message_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_2;
  t2 = this.replyTo_1;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_0, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["pos_5", "result_4", "box_0", "completer_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_2;
  $.indexSet(t1, this.pos_5, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_4.get$isComplete() !== true)
    this.completer_3.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["result_8", "completer_7", "future_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_8.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_6.get$stackTrace());
  return true;
}
};

$$._FutureImpl_transform_anon = {"": ["completer_1", "transformation_0"],
 "super": "Closure",
 call$1: function(v, exception) {
  var transformed, t1, e, stackTrace;
  transformed = null;
  try {
    transformed = this.transformation_0.call$1(v);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    stackTrace = $.getTraceFromException(exception);
    this.completer_1.completeException$2(e, stackTrace);
    return;
  }

  this.completer_1.complete$1(transformed);
}
};

$$._FutureImpl__forwardException_anon = {"": ["future_1", "completer_0"],
 "super": "Closure",
 call$1: function(e) {
  this.completer_0.completeException$2(e, this.future_1.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.values_0, v);
}
};

$$._HashMapImpl_values__ = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$._LinkedHashMapImpl_values__ = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["message_5", "this_4", "replyTo_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_4;
  t3 = this.replyTo_3;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_5;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(shouldSerialize, t2, t1), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"": ["shouldSerialize_7", "this_6", "box_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_6;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_7 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon0 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1(null)
}
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1(null)
}
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); },
 call$0: function() {
  return this.call$1(null)
}
};
$$.BoundClosure3 = {'':
['self', 'target'],
'super': 'Closure',
call$6: function(p0, p1, p2, p3, p4, p5) { return this.self[this.target](p0, p1, p2, p3, p4, p5); }
};
$$.BoundClosure4 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$._JsDeserializer$ = function() {
  var t1 = new $._JsDeserializer(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_JsDeserializer'});
  return t1;
};

$.WorkerContextEvents$ = function(_ptr) {
  var t1 = new $.WorkerContextEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'WorkerContextEvents'});
  return t1;
};

$.Events$ = function(_ptr) {
  var t1 = new $.Events(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'Events'});
  return t1;
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.LocalWindowEvents$ = function(_ptr) {
  var t1 = new $.LocalWindowEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'LocalWindowEvents'});
  return t1;
};

$.DoubleLinkedQueue$ = function(E) {
  var t1 = new $.DoubleLinkedQueue(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'DoubleLinkedQueue<' + E + '>', 'E': E});
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(_sentinel, E) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_DoubleLinkedQueueIterator<' + E + '>', 'E': E});
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$._DoubleLinkedQueueEntrySentinel$ = function(E) {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_DoubleLinkedQueueEntrySentinel<' + E + '>', 'E': E});
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.DoubleLinkedQueueEntry$ = function(e, E) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'DoubleLinkedQueueEntry<' + E + '>', 'E': E});
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC0));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.createInvocationMirror = function(name$, internalName, type, arguments$, argumentNames) {
  return $.JSInvocationMirror$(name$, internalName, type, arguments$, argumentNames);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC0);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC0);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], $.makeLiteralMap([]), null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap('dynamic', 'dynamic');
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg2, closure, arg1));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  if (!(target == null))
    target.builtin$typeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  var res;
  if (target == null)
    return;
  res = target.builtin$typeInfo;
  return res == null ? {} : res;
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S(staticName)));
};

$.HandleSystem$ = function(_totalCapacity, _staticCapacity) {
  var t1 = new $.HandleSystem(null, _totalCapacity, _staticCapacity, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'HandleSystem'});
  t1.HandleSystem$2(_totalCapacity, _staticCapacity);
  return t1;
};

$.getRuntimeTypeString = function(object) {
  return object.builtin$typeInfo.runtimeType;
};

$.getOrCreateCachedRuntimeType = function(key) {
  var result = $.get$runtimeTypeCache()[key];
  if (result == null) {
    result = $.TypeImpl$(key);
    $.get$runtimeTypeCache()[key] = result;
  }
  return result;
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return 'Null';
  constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf('Chrome') !== -1 || userAgent.indexOf('DumpRenderTree') !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf('Firefox') !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf('MSIE') !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf('Opera') !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf('AppleWebKit') !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (entry.get$_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC3)[name$];
  if (!(dartMethod == null))
    methods['Object'] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.mat4$zero = function() {
  var t1 = new $.mat4(null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'mat4'});
  t1.mat4$zero$0();
  return t1;
};

$.mat4$identity = function() {
  var t1 = new $.mat4(null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'mat4'});
  t1.mat4$identity$0();
  return t1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result === null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpAttachGlobalNative = function(regExp) {
  regExp._re = $.regExpMakeNative(regExp, true);
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true)
    $.add$1(sb, 'm');
  if (ignoreCase === true)
    $.add$1(sb, 'i');
  if (global === true)
    $.add$1(sb, 'g');
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.regExpMatchStart = function(m) {
  return m.index;
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, length$, patternLength, startIndex, position, endIndex;
  result = $._ListImpl_List(null, 'Match');
  t1 = 'Match';
  $.setRuntimeTypeInfo(result, {runtimeType: 'List<' + t1 + '>', 'E': t1});
  length$ = $.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === 'string')
    return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.substring$1(receiver, startIndex))).get$hasNext();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i;
  if (from === '')
    if (receiver === '')
      return to;
    else {
      result = $.StringBuffer_StringBuffer('');
      length$ = receiver.length;
      $.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.CTC2, true), "\\$&"), false, false), true), to);
};

$.stringReplaceFirstUnchecked = function(receiver, from, to) {
  return $.stringReplaceJS(receiver, from, to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.WorkerEvents$ = function(_ptr) {
  var t1 = new $.WorkerEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'WorkerEvents'});
  return t1;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split('|');
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.eqB($.get$length(receiver), 0))
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.toString = function(value) {
  if (typeof value == "object" && value !== null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver, 'dynamic');
  return receiver.iterator$0();
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.map = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.map$1(f);
  else
    return $.Collections_map(receiver, [], f);
};

$.addAll = function(receiver, collection) {
  var iterator;
  if (!$.isJsArray(receiver))
    return receiver.addAll$1(collection);
  iterator = $.iterator(collection);
  for (; iterator.get$hasNext() === true;)
    $.add$1(receiver, iterator.next$0());
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.get$last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.get$last();
  return receiver.operator$index$1($.sub($.get$length(receiver), 1));
};

$.AbstractWorkerEvents$ = function(_ptr) {
  var t1 = new $.AbstractWorkerEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'AbstractWorkerEvents'});
  return t1;
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    return receiver.indexOf(element);
  }
  return receiver.indexOf$1(element);
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.allMatches = function(receiver, str) {
  if (!(typeof receiver === 'string'))
    return receiver.allMatches$1(str);
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
};

$.contains$1 = function(receiver, other) {
  var i;
  if (typeof receiver !== 'string' && (typeof receiver !== 'object' || receiver === null || receiver.constructor !== Array && !receiver.is$JavaScriptIndexingBehavior()))
    return $.contains$1$bailout(1, receiver, other);
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(other, receiver[i]))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.endsWith = function(receiver, other) {
  var receiverLength, otherLength;
  $.checkString(other);
  receiverLength = receiver.length;
  otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$.replaceFirst = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceFirst$2(from, to);
  $.checkString(to);
  return $.stringReplaceFirstUnchecked(receiver, from, to);
};

$.startsWith = function(receiver, other) {
  var length$;
  if (!(typeof receiver === 'string'))
    return receiver.startsWith$1(other);
  $.checkString(other);
  length$ = other.length;
  if (length$ > receiver.length)
    return false;
  return other == receiver.substring(0, length$);
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  var length$;
  $.checkNum(startIndex);
  length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.RangeError$value(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.get$hashCode = function(receiver) {
  var length$, i, hash, hash0, hash1;
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 0x1FFFFFFF;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  length$ = receiver.length;
  for (i = 0, hash = 0; i < length$; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + 524287 & hash0 << 10;
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
  }
  hash0 = 536870911 & hash + 67108863 & hash << 3;
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + 16383 & hash0 << 15;
};

$.get$runtimeType = function(receiver) {
  if (typeof receiver === 'number' && Math.floor(receiver) === receiver)
    return $.getOrCreateCachedRuntimeType('int');
  else if (typeof receiver === 'string')
    return $.getOrCreateCachedRuntimeType('String');
  else if (typeof receiver === 'number')
    return $.getOrCreateCachedRuntimeType('double');
  else if (typeof receiver === 'boolean')
    return $.getOrCreateCachedRuntimeType('bool');
  else if (receiver == null)
    return $.getOrCreateCachedRuntimeType('Null');
  else if ($.isJsArray(receiver))
    return $.getOrCreateCachedRuntimeType('List');
  else
    return receiver.get$runtimeType();
};

$._TransformGraphNode$ = function() {
  var t1 = new $._TransformGraphNode(null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_TransformGraphNode'});
  return t1;
};

$.Object$ = function() {
  var t1 = new $.Object();
  $.setRuntimeTypeInfo(t1, {runtimeType: 'Object'});
  return t1;
};

$.JSInvocationMirror$ = function(memberName, _internalName, _kind, _arguments, _namedArgumentNames) {
  var t1 = new $.JSInvocationMirror(memberName, _internalName, _kind, _arguments, _namedArgumentNames, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'JSInvocationMirror'});
  return t1;
};

$.vec4$raw = function(x_, y_, z_, w_) {
  var t1 = new $.vec4(null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec4'});
  t1.vec4$raw$4(x_, y_, z_, w_);
  return t1;
};

$.vec4$zero = function() {
  var t1 = new $.vec4(null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec4'});
  t1.vec4$zero$0();
  return t1;
};

$.main = function() {
  $.Game_init();
  $._registerComponentSystemsWithGame();
  $.Clicker$();
  $.print('initialized clicker');
};

$._registerComponentSystemsWithGame = function() {
  var scorePrinterSystem, transformSystem, mouseEventsSystem, evadeMouseSystem, destroyOnClickSystem;
  scorePrinterSystem = $.ComponentSystem$($.ComponentPool$($.ScorePrinter_componentConstructor, 'ScorePrinter'), 'ScorePrinter');
  $.Game_componentManager().registerComponentSystem$2('ScorePrinter', scorePrinterSystem);
  transformSystem = $.ComponentSystem$($.ComponentPool$($.Transform_componentConstructor, 'Transform'), 'Transform');
  $.Game_componentManager().registerComponentSystem$2('Transform', transformSystem);
  mouseEventsSystem = $.ComponentSystem$($.ComponentPool$($.MouseEvents_componentConstructor, 'MouseEvents'), 'MouseEvents');
  $.Game_componentManager().registerComponentSystem$2('MouseEvents', mouseEventsSystem);
  evadeMouseSystem = $.ComponentSystem$($.ComponentPool$($.EvadeMouse_componentConstructor, 'EvadeMouse'), 'EvadeMouse');
  $.Game_componentManager().registerComponentSystem$2('EvadeMouse', evadeMouseSystem);
  destroyOnClickSystem = $.ComponentSystem$($.ComponentPool$($.DestroyOnClick_componentConstructor, 'DestroyOnClick'), 'DestroyOnClick');
  $.Game_componentManager().registerComponentSystem$2('DestroyOnClick', destroyOnClickSystem);
};

$.window = function() {
  return window;
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$.IllegalArgumentException$ = function(argument) {
  var t1 = new $.IllegalArgumentException(argument);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IllegalArgumentException'});
  return t1;
};

$.Handle_getIndex = function(handle) {
  return $.shr(handle, 0) & 1048575;
};

$.Handle_makeHandle = function(index, serial, type, status$) {
  var index0, serial0, type0, status0;
  index0 = (index & 1048575) << 0;
  serial0 = (serial & 15) << 20;
  type0 = (type & 15) << 24;
  status0 = (status$ & 15) << 28;
  return (index0 | serial0 | type0 | status0) >>> 0;
};

$.Handle_makeStaticHandle = function(index, type, status$) {
  return $.Handle_makeHandle(index, 15, type, status$);
};

$.Handle_makeNextPointer = function(serial, nextIndex) {
  return $.Handle_makeHandle(nextIndex, serial, 0, 2);
};

$.ComponentPool$ = function(_constructor, E) {
  var t1 = new $.ComponentPool(null, _constructor);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ComponentPool<' + E + '>', 'E': E});
  t1.ComponentPool$1(_constructor);
  return t1;
};

$.ScorePrinter$ = function() {
  var t1 = new $.ScorePrinter(0, null, true, null, null, $.Set_Set('String'));
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ScorePrinter'});
  t1.ScriptComponent$1('ScorePrinter');
  return t1;
};

$.ScorePrinter_componentConstructor = function() {
  return $.ScorePrinter$();
};

$.ComponentSystem$ = function(_componentPool, T) {
  var t1 = new $.ComponentSystem(_componentPool, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ComponentSystem<' + T + '>', 'T': T});
  t1.ComponentSystem$1(_componentPool);
  return t1;
};

$.BodyElementEvents$ = function(_ptr) {
  var t1 = new $.BodyElementEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'BodyElementEvents'});
  return t1;
};

$.MouseEvents_componentConstructor = function() {
  return $.MouseEvents$();
};

$.MouseEvents$ = function() {
  var t1 = new $.MouseEvents(null, true, null, null, $.Set_Set('String'));
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MouseEvents'});
  t1.MouseEvents$0();
  return t1;
};

$.WebSocketEvents$ = function(_ptr) {
  var t1 = new $.WebSocketEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'WebSocketEvents'});
  return t1;
};

$.EvadeMouse$ = function() {
  var t1 = new $.EvadeMouse(20, null, null, null, true, null, null, $.Set_Set('String'));
  $.setRuntimeTypeInfo(t1, {runtimeType: 'EvadeMouse'});
  t1.ScriptComponent$1('EvadeMouse');
  return t1;
};

$.EvadeMouse_componentConstructor = function() {
  return $.EvadeMouse$();
};

$.DestroyOnClick$ = function() {
  var t1 = new $.DestroyOnClick(null, true, null, null, $.Set_Set('String'));
  $.setRuntimeTypeInfo(t1, {runtimeType: 'DestroyOnClick'});
  t1.ScriptComponent$1('DestroyOnClick');
  return t1;
};

$.DestroyOnClick_componentConstructor = function() {
  return $.DestroyOnClick$();
};

$.BatteryManagerEvents$ = function(_ptr) {
  var t1 = new $.BatteryManagerEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'BatteryManagerEvents'});
  return t1;
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.TypeImpl$ = function(typeName) {
  var t1 = new $.TypeImpl(typeName);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'TypeImpl'});
  return t1;
};

$.TextTrackListEvents$ = function(_ptr) {
  var t1 = new $.TextTrackListEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'TextTrackListEvents'});
  return t1;
};

$.AudioContextEvents$ = function(_ptr) {
  var t1 = new $.AudioContextEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'AudioContextEvents'});
  return t1;
};

$.EventListenerList$ = function(_ptr, _type) {
  var t1 = new $.EventListenerList(_ptr, _type);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'EventListenerList'});
  return t1;
};

$.InputElementEvents$ = function(_ptr) {
  var t1 = new $.InputElementEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'InputElementEvents'});
  return t1;
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  var t1 = new $.IDBVersionChangeRequestEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IDBVersionChangeRequestEvents'});
  return t1;
};

$.IDBRequestEvents$ = function(_ptr) {
  var t1 = new $.IDBRequestEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IDBRequestEvents'});
  return t1;
};

$.TextTrackCueEvents$ = function(_ptr) {
  var t1 = new $.TextTrackCueEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'TextTrackCueEvents'});
  return t1;
};

$.TextTrackEvents$ = function(_ptr) {
  var t1 = new $.TextTrackEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'TextTrackEvents'});
  return t1;
};

$.IDBTransactionEvents$ = function(_ptr) {
  var t1 = new $.IDBTransactionEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IDBTransactionEvents'});
  return t1;
};

$.Game_componentManager = function() {
  return $.Game__componentManager;
};

$.Game_init = function() {
  $.Game__instance = null;
  $.Game__componentManager = $.ComponentManager$();
};

$.Clicker$ = function() {
  var t1 = new $.Clicker(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'Clicker'});
  t1.Scene$1(256);
  t1.Clicker$0();
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertNativeToDart_SerializedScriptValue = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t3, t2, t1).call$1(value);
  t4.call$0();
  return copy;
};

$._convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values, copies, t1;
  values = [];
  copies = [];
  t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies), t1, mustCopy, new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  var t1 = new $.MetaInfo(_tag, _tags, _set);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MetaInfo'});
  return t1;
};

$.GameObject$ = function(_id) {
  var t1 = new $.GameObject(_id, null, null, null, null, null, null, true, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'GameObject'});
  t1.GameObject$1(_id);
  return t1;
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  var t1 = new $.IDBOpenDBRequestEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IDBOpenDBRequestEvents'});
  return t1;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$.TransformGraph$ = function(_maxNodes) {
  var t1 = new $.TransformGraph(null, null, null, null, null, null, null, null, _maxNodes);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'TransformGraph'});
  t1.TransformGraph$1(_maxNodes);
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.PropertyMap$ = function() {
  var t1 = new $.PropertyMap(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'PropertyMap'});
  t1.PropertyMap$0();
  return t1;
};

$.PropertyMap$from = function(other) {
  var t1 = new $.PropertyMap(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'PropertyMap'});
  t1.PropertyMap$from$1(other);
  return t1;
};

$.SVGElementInstanceEvents$ = function(_ptr) {
  var t1 = new $.SVGElementInstanceEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'SVGElementInstanceEvents'});
  return t1;
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.PropertyContainer_validate = function(value) {
  if (typeof value === 'number' || typeof value === 'boolean' || typeof value === 'string' || value == null || typeof value === 'object' && value !== null && !!value.is$Serializable)
    return value;
  else if (typeof value === 'object' && value !== null && (value.constructor === Array || value.is$List()))
    return $.PropertyList$from(value);
  else if (typeof value === 'object' && value !== null && value.is$Map())
    return $.PropertyMap$from(value);
  throw $.$$throw('Value not supported on a PropertyContainer. Trying to save an instance of ' + $.S($.reflect(value).get$type().get$simpleName()) + '. Only numbers, booleans, Strings, ' + 'classes that implement Serializable and Lists and Maps of those' + 'types are allowed as entries on a PropertyContainer.');
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ('\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n' === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.DocumentEvents$ = function(_ptr) {
  var t1 = new $.DocumentEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'DocumentEvents'});
  return t1;
};

$.LinkedHashMap_LinkedHashMap = function(K, V) {
  return $._LinkedHashMapImpl$(K, V);
};

$.Primitives_getProperty = function(object, key) {
  $.checkNull(object);
  if (typeof object === 'boolean' || typeof object === 'number' || typeof object === 'string')
    throw $.$$throw($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  $.checkNull(object);
  if (typeof object === 'boolean' || typeof object === 'number' || typeof object === 'string')
    throw $.$$throw($.ArgumentError$(object));
  object[key] = value;
};

$.Primitives_getConstructor = function(className) {
  return $[className];
};

$._LinkedHashMapImpl$ = function(K, V) {
  var t1 = new $._LinkedHashMapImpl(null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_LinkedHashMapImpl<' + K + ', ' + V + '>', 'K': K, 'V': V});
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_map = function(source, destination, f) {
  var t1;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result, t1;
  result = $.StringBuffer_StringBuffer('');
  t1 = $._ListImpl_List(null, 'dynamic');
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<dynamic>'});
  $.Collections__emitCollection(c, result, t1);
  return $.toString(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (t1 = $.iterator(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$._KeyValuePair$ = function(key, value, K, V) {
  var t1 = new $._KeyValuePair(key, value);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_KeyValuePair<' + K + ', ' + V + '>', 'K': K, 'V': V});
  return t1;
};

$.RangeError$value = function(value) {
  var t1 = new $.RangeError('value ' + $.S(value));
  $.setRuntimeTypeInfo(t1, {runtimeType: 'RangeError'});
  return t1;
};

$.ArgumentError$ = function(message) {
  var t1 = new $.ArgumentError(message);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ArgumentError'});
  return t1;
};

$._ExceptionImplementation$ = function(message) {
  var t1 = new $._ExceptionImplementation(message);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_ExceptionImplementation'});
  return t1;
};

$.StackTrace$ = function(stack) {
  var t1 = new $.StackTrace(stack);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'StackTrace'});
  return t1;
};

$.UnsupportedError$ = function(message) {
  var t1 = new $.UnsupportedError(message);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'UnsupportedError'});
  return t1;
};

$.StackOverflowError$ = function() {
  var t1 = new $.StackOverflowError();
  $.setRuntimeTypeInfo(t1, {runtimeType: 'StackOverflowError'});
  return t1;
};

$.RuntimeError$ = function(message) {
  var t1 = new $.RuntimeError(message);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'RuntimeError'});
  return t1;
};

$.Maps_mapToString = function(m) {
  var result, t1;
  result = $.StringBuffer_StringBuffer('');
  t1 = $._ListImpl_List(null, 'dynamic');
  $.setRuntimeTypeInfo(t1, {runtimeType: 'List<dynamic>'});
  $.Maps__emitMap(m, result, t1);
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(visiting, result, t1));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$._Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$._Collections_map = function(source, destination, f) {
  var t1;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$._FixedSizeListIterator$ = function(array, T) {
  var t1 = new $._FixedSizeListIterator($.get$length(array), array, 0);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_FixedSizeListIterator<' + T + '>', 'T': T});
  return t1;
};

$.IDBDatabaseEvents$ = function(_ptr) {
  var t1 = new $.IDBDatabaseEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IDBDatabaseEvents'});
  return t1;
};

$.StateError$ = function(message) {
  var t1 = new $.StateError(message);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'StateError'});
  return t1;
};

$.UnimplementedError$ = function(message) {
  var t1 = new $.UnimplementedError(message);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'UnimplementedError'});
  return t1;
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  var t1 = new $.HttpRequestUploadEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'HttpRequestUploadEvents'});
  return t1;
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  var t1 = new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'JSSyntaxRegExp'});
  return t1;
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  $.regExpAttachGlobalNative(re);
  return re;
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  var t1 = new $.SpeechRecognitionEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'SpeechRecognitionEvents'});
  return t1;
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_StringBufferImpl'});
  t1._StringBufferImpl$1(content$);
  return t1;
};

$._ensureEnabled = function() {
  if ($.Primitives_mirrorsEnabled === true)
    return;
  throw $.$$throw($.UnsupportedError$('dart:mirrors is an experimental feature'));
};

$.reflect = function(reflectee) {
  $._ensureEnabled();
  return $._InstanceMirror$(reflectee);
};

$.HttpRequestEvents$ = function(_ptr) {
  var t1 = new $.HttpRequestEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'HttpRequestEvents'});
  return t1;
};

$.NullPointerException$ = function(functionName, arguments$) {
  var t1 = new $.NullPointerException(functionName, arguments$);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'NullPointerException'});
  return t1;
};

$._StringImpl__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $._StringImpl__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$, 'dynamic');
    $.setRuntimeTypeInfo(array, {runtimeType: 'List<dynamic>'});
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.Enemy$ = function(id) {
  var t1 = new $.Enemy(id, null, null, null, null, null, null, true, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'Enemy'});
  t1.GameObject$1(id);
  t1.Enemy$1(id);
  return t1;
};

$._ListImpl_List = function(length$, E) {
  return $.Primitives_newList(length$);
};

$.EventListenerMap$ = function(_owner) {
  var t1 = new $.EventListenerMap(_owner, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'EventListenerMap'});
  t1.EventListenerMap$1(_owner);
  return t1;
};

$._ListImpl_List$from = function(other, E) {
  var result, t1;
  result = $._ListImpl_List(null, 'dynamic');
  $.setRuntimeTypeInfo(result, {runtimeType: 'List<dynamic>'});
  for (t1 = $.iterator(other); t1.get$hasNext() === true;)
    result.push(t1.next$0());
  return result;
};

$.Map_Map = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.Map_Map$from = function(other, K, V) {
  return $._HashMapImpl__HashMapImpl$from(other, K, V);
};

$.Transform_componentConstructor = function() {
  return $.Transform$();
};

$.Transform$ = function() {
  var t1 = new $.Transform(null, null, null, true, null, null, $.Set_Set('String'));
  $.setRuntimeTypeInfo(t1, {runtimeType: 'Transform'});
  t1.Transform$0();
  return t1;
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  var t1 = new $.SharedWorkerContextEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'SharedWorkerContextEvents'});
  return t1;
};

$.EventListenerSet$ = function() {
  var t1 = new $.EventListenerSet(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'EventListenerSet'});
  t1.EventListenerSet$0();
  return t1;
};

$._HashMapImpl$ = function(K, V) {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_HashMapImpl<' + K + ', ' + V + '>', 'K': K, 'V': V});
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__HashMapImpl$from = function(other, K, V) {
  var result = $._HashMapImpl$(K, V);
  $.forEach(other, new $._HashMapImpl__HashMapImpl$from_anon(result));
  return result;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return $.and($.add(currentProbe, numberOfProbes), $.sub(length$, 1));
};

$.HashMap_HashMap = function(K, V) {
  return $._HashMapImpl$(K, V);
};

$.FrameSetElementEvents$ = function(_ptr) {
  var t1 = new $.FrameSetElementEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'FrameSetElementEvents'});
  return t1;
};

$._HashSetImpl$ = function(E) {
  var t1 = new $._HashSetImpl(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_HashSetImpl<' + E + '>', 'E': E});
  t1._HashSetImpl$0();
  return t1;
};

$._HashSetImpl__HashSetImpl$from = function(other, E) {
  var set, t1;
  set = $._HashSetImpl$(E);
  for (t1 = $.iterator(other); t1.get$hasNext() === true;)
    set.add$1(t1.next$0());
  return set;
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  var t1 = new $.ScriptProcessorNodeEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ScriptProcessorNodeEvents'});
  return t1;
};

$._HashSetIterator$ = function(set_, E) {
  var t1 = new $._HashSetIterator(set_._backingMap.get$_keys(), -1);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_HashSetIterator<' + E + '>', 'E': E});
  t1._HashSetIterator$1(set_);
  return t1;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  var t1 = new $.IllegalJSRegExpException(_pattern, _errmsg);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'IllegalJSRegExpException'});
  return t1;
};

$.FileWriterEvents$ = function(_ptr) {
  var t1 = new $.FileWriterEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'FileWriterEvents'});
  return t1;
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  var t1 = new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'NoSuchMethodError'});
  return t1;
};

$.NoSuchMethodError_safeToString = function(object) {
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"')) + '"';
  return $.Primitives_objectToString(object);
};

$.FileReaderEvents$ = function(_ptr) {
  var t1 = new $.FileReaderEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'FileReaderEvents'});
  return t1;
};

$.PropertyList$from = function(other) {
  var t1 = new $.PropertyList(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'PropertyList'});
  t1.PropertyList$from$1(other);
  return t1;
};

$.Float32Array_Float32Array = function(length$) {
  return new Float32Array(length$);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  var t1 = new $.RTCPeerConnectionEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'RTCPeerConnectionEvents'});
  return t1;
};

$.EventSourceEvents$ = function(_ptr) {
  var t1 = new $.EventSourceEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'EventSourceEvents'});
  return t1;
};

$._InstanceMirror$ = function(reflectee) {
  var t1 = new $._InstanceMirror(reflectee);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_InstanceMirror'});
  t1._InstanceMirror$1(reflectee);
  return t1;
};

$.Expando$ = function(name$, T) {
  var t1 = new $.Expando(name$);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'Expando<' + T + '>', 'T': T});
  return t1;
};

$.RTCDataChannelEvents$ = function(_ptr) {
  var t1 = new $.RTCDataChannelEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'RTCDataChannelEvents'});
  return t1;
};

$.vec3$ = function(x_, y_, z_) {
  var t1 = new $.vec3(null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec3'});
  t1.vec3$3(x_, y_, z_);
  return t1;
};

$.vec3$zero = function() {
  var t1 = new $.vec3(null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec3'});
  t1.vec3$zero$0();
  return t1;
};

$.vec3$raw = function(x_, y_, z_) {
  var t1 = new $.vec3(null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec3'});
  t1.vec3$raw$3(x_, y_, z_);
  return t1;
};

$._ClassMirror$ = function(_name, _jsConstructor) {
  var t1 = new $._ClassMirror(_name, _jsConstructor);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_ClassMirror'});
  t1._ClassMirror$2(_name, _jsConstructor);
  return t1;
};

$.MediaElementEvents$ = function(_ptr) {
  var t1 = new $.MediaElementEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MediaElementEvents'});
  return t1;
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  var t1 = new $.DedicatedWorkerContextEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'DedicatedWorkerContextEvents'});
  return t1;
};

$.ElementEvents$ = function(_ptr) {
  var t1 = new $.ElementEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ElementEvents'});
  return t1;
};

$.ListIterator$ = function(list, T) {
  var t1 = new $.ListIterator(0, list);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ListIterator<' + T + '>', 'T': T});
  return t1;
};

$.PeerConnection00Events$ = function(_ptr) {
  var t1 = new $.PeerConnection00Events(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'PeerConnection00Events'});
  return t1;
};

$.ComponentManager$ = function() {
  var t1 = new $.ComponentManager(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'ComponentManager'});
  t1.ComponentManager$0();
  return t1;
};

$.StringMatch$ = function(start, str, pattern) {
  var t1 = new $.StringMatch(start, str, pattern);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'StringMatch'});
  return t1;
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._AllMatchesIterable$ = function(_re, _str) {
  var t1 = new $._AllMatchesIterable(_re, _str);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_AllMatchesIterable'});
  return t1;
};

$.Set_Set = function(E) {
  return $._HashSetImpl$(E);
};

$.Set_Set$from = function(other, E) {
  return $._HashSetImpl__HashSetImpl$from(other, E);
};

$._AllMatchesIterator$ = function(re, _str) {
  var t1 = new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_AllMatchesIterator'});
  return t1;
};

$.Future_Future$immediate = function(value, T) {
  return $._FutureImpl__FutureImpl$immediate(value, T);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  var t1 = new $._MatchImplementation(pattern, str, start, end, _groups);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_MatchImplementation'});
  return t1;
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_IsolateContext'});
  t1._IsolateContext$0();
  return t1;
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  var t1 = new $.DOMApplicationCacheEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'DOMApplicationCacheEvents'});
  return t1;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_Manager'});
  t1._Manager$0();
  return t1;
};

$._EventLoop$ = function() {
  var t1 = new $._EventLoop($.Queue_Queue('_IsolateEvent'));
  $.setRuntimeTypeInfo(t1, {runtimeType: '_EventLoop'});
  return t1;
};

$.NotificationEvents$ = function(_ptr) {
  var t1 = new $.NotificationEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'NotificationEvents'});
  return t1;
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_Timer'});
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_Timer'});
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.DoubleLinkedQueue$(E);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  var t1 = new $._IsolateEvent(isolate, fn, message);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_IsolateEvent'});
  return t1;
};

$._MainManagerStub$ = function() {
  var t1 = new $._MainManagerStub();
  $.setRuntimeTypeInfo(t1, {runtimeType: '_MainManagerStub'});
  return t1;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  $.setRuntimeTypeInfo(t1, {runtimeType: '_JsSerializer'});
  t1._JsSerializer$0();
  return t1;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  var t1 = new $._NativeJsSendPort(_receivePort, isolateId);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_NativeJsSendPort'});
  return t1;
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  var t1 = new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_WorkerSendPort'});
  return t1;
};

$._MessageTraverserVisitedMap$ = function() {
  var t1 = new $._MessageTraverserVisitedMap();
  $.setRuntimeTypeInfo(t1, {runtimeType: '_MessageTraverserVisitedMap'});
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  $.setRuntimeTypeInfo(t1, {runtimeType: '_JsCopier'});
  t1._JsCopier$0();
  return t1;
};

$._JsVisitedMap$ = function() {
  var t1 = new $._JsVisitedMap(null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_JsVisitedMap'});
  return t1;
};

$.Completer_Completer = function(T) {
  return $._CompleterImpl$(T);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_ReceivePortImpl'});
  t1._ReceivePortImpl$0();
  return t1;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_PendingSendPortFinder'});
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0, 'List');
  completer = $.Completer_Completer('List');
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $._ListImpl_List(futures.length, 'dynamic');
  $.setRuntimeTypeInfo(values, {runtimeType: 'List<dynamic>'});
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(i, result, t1, completer, values));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$.MessagePortEvents$ = function(_ptr) {
  var t1 = new $.MessagePortEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MessagePortEvents'});
  return t1;
};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$('dynamic'));
  $.setRuntimeTypeInfo(t1, {runtimeType: '_CompleterImpl<' + T + '>', 'T': T});
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(false, null, null, null, false, [], [], []);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_FutureImpl<' + T + '>', 'T': T});
  return t1;
};

$._FutureImpl__FutureImpl$immediate = function(value, T) {
  var res = $._FutureImpl$('dynamic');
  res._setValue$1(value);
  return res;
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  var t1 = new $.MediaStreamTrackListEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MediaStreamTrackListEvents'});
  return t1;
};

$.vec2$ = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec2'});
  t1.vec2$2(x_, y_);
  return t1;
};

$.vec2$raw = function(x_, y_) {
  var t1 = new $.vec2(null, null);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'vec2'});
  t1.vec2$raw$2(x_, y_);
  return t1;
};

$.FutureAlreadyCompleteException$ = function() {
  var t1 = new $.FutureAlreadyCompleteException();
  $.setRuntimeTypeInfo(t1, {runtimeType: 'FutureAlreadyCompleteException'});
  return t1;
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  var t1 = new $.MediaStreamTrackEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MediaStreamTrackEvents'});
  return t1;
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  var t1 = new $.FutureUnhandledException(source, stackTrace);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'FutureUnhandledException'});
  return t1;
};

$.MediaStreamEvents$ = function(_ptr) {
  var t1 = new $.MediaStreamEvents(_ptr);
  $.setRuntimeTypeInfo(t1, {runtimeType: 'MediaStreamEvents'});
  return t1;
};

$._DOMWindowCrossFrame$ = function(_window) {
  var t1 = new $._DOMWindowCrossFrame(_window);
  $.setRuntimeTypeInfo(t1, {runtimeType: '_DOMWindowCrossFrame'});
  return t1;
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FutureNotCompleteException$ = function() {
  var t1 = new $.FutureNotCompleteException();
  $.setRuntimeTypeInfo(t1, {runtimeType: 'FutureNotCompleteException'});
  return t1;
};

$.contains$1$bailout = function(state0, receiver, other) {
  var i;
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (i = 0; $.ltB(i, $.get$length(receiver)); ++i)
      if ($.eqB(other, $.index(receiver, i)))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._StringImpl__toJsStringArray$bailout = function(state0, strings) {
  var length$, i, string, array;
  $.checkNull(strings);
  length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$, 'dynamic');
    $.setRuntimeTypeInfo(array, {runtimeType: 'List<dynamic>'});
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC0, 'List');
  completer = $.Completer_Completer('List');
  result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  values = $._ListImpl_List($.get$length(futures), 'dynamic');
  $.setRuntimeTypeInfo(values, {runtimeType: 'List<dynamic>'});
  for (i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(i, result, t1, completer, values));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.ScorePrinter_componentConstructor.call$0 = $.ScorePrinter_componentConstructor;
$.ScorePrinter_componentConstructor.$name = "ScorePrinter_componentConstructor";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.DestroyOnClick_componentConstructor.call$0 = $.DestroyOnClick_componentConstructor;
$.DestroyOnClick_componentConstructor.$name = "DestroyOnClick_componentConstructor";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.Transform_componentConstructor.call$0 = $.Transform_componentConstructor;
$.Transform_componentConstructor.$name = "Transform_componentConstructor";
$.MouseEvents_componentConstructor.call$0 = $.MouseEvents_componentConstructor;
$.MouseEvents_componentConstructor.$name = "MouseEvents_componentConstructor";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.EvadeMouse_componentConstructor.call$0 = $.EvadeMouse_componentConstructor;
$.EvadeMouse_componentConstructor.$name = "EvadeMouse_componentConstructor";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC0 = Isolate.makeConstantList([]);
$.CTC = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC0);
$.CTC2 = new Isolate.$isolateProperties.JSSyntaxRegExp('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
$.CTC1 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC3 = new Isolate.$isolateProperties.Object();
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC1;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._cachedBrowserPrefix = null;
$._getTypeNameOf = null;
$.MIRROR_OPT_IN_MESSAGE = '\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n';
$._TimerFactory__factory = null;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$.Handle_IndexMask = 1048575;
$.Handle_IndexShift = 0;
$.Handle_SerialMask = 15;
$.Handle_SerialShift = 20;
$.Handle_TypeShift = 24;
$.Handle_TypeMask = 15;
$.Handle_StatusMask = 15;
$.Handle_StatusShift = 28;
$.Expando__KEY_PROPERTY_NAME = 'expando$key';
$.Expando__EXPANDO_PROPERTY_NAME = 'expando$values';
$.Expando__keyCount = 0;
$.Game__componentManager = null;
$.Handle_StatusFreeList = 2;
$.Game__instance = null;
$._ReceivePortImpl__nextFreeId = 1;
$.JSInvocationMirror_METHOD = 0;
$.JSInvocationMirror_GETTER = 1;
$.JSInvocationMirror_SETTER = 2;
Isolate.$lazy($, 'runtimeTypeCache', 'runtimeTypeCache', 'get$runtimeTypeCache', function() {
  return {};
});
Isolate.$lazy($, 'classMirrors', '_InstanceMirror_classMirrors', 'get$_InstanceMirror_classMirrors', function() {
  return $.Expando$(null, 'ClassMirror');
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$ArrayBuffer: function() { return false; },
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$Collection: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$ImageData: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$List: function() { return false; },
 is$Map: function() { return false; },
 is$File: function() { return false; },
 is$_FileList: function() { return false; },
 is$Blob: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('AnalyserNode', {"": []
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name!", "type?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WebKitAnimation', {"": ["duration?"]
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('HTMLAppletElement', {"": ["name!"]
});

$.$defineNativeClass('HTMLAreaElement', {"": []
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["duration?", "length?"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": []
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $.AudioContextEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": []
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); }
});

$.$defineNativeClass('BarInfo', {"": []
});

$.$defineNativeClass('HTMLBaseElement', {"": []
});

$.$defineNativeClass('HTMLBaseFontElement', {"": []
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": ["type?"]
});

$.$defineNativeClass('Blob', {"": ["type?"],
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["name!", "type?", "value="]
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": []
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name!"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": []
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": ["type?"]
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length?"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$animation: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'animation');
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$position: function() {
  return this.getPropertyValue$1('position');
},
 set$position: function(value) {
  this.setProperty$3('position', value, '');
},
 get$transform: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'transform');
}
});

$.$defineNativeClass('CSSStyleRule', {"": []
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": []
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('HTMLCanvasElement', {"": []
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": [],
 transform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.transform(m11,m12,m21,m22,dx,dy);
},
 get$transform: function() { return new $.BoundClosure3(this, 'transform$6'); }
});

$.$defineNativeClass('ChannelMergerNode', {"": []
});

$.$defineNativeClass('ChannelSplitterNode', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["data?", "length?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": []
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": ["data?"]
});

Console = (typeof console == 'undefined' ? {} : console);
Console.error$1 = function(arg) {
  return this.error(arg);
};
$.$defineNativeClass('HTMLContentElement', {"": []
});

$.$defineNativeClass('ConvolverNode', {"": []
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": []
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": []
});

$.$defineNativeClass('DOMException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["root?"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["root?"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeType', {"": ["type?"]
});

$.$defineNativeClass('MimeTypeArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'DOMMimeType');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('Plugin', {"": ["length?"]
});

$.$defineNativeClass('PluginArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'DOMPlugin');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"": ["type?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length?"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {"": []
});

$.$defineNativeClass('DataTransferItem', {"": ["type?"]
});

$.$defineNativeClass('DataTransferItemList', {"": ["length?"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": []
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": []
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": []
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": []
});

$.$defineNativeClass('HTMLDocument', {"": [],
 get$on: function() {
  return $.DocumentEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('DocumentType', {"": [],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["id?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["name!", "type?"]
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('Entry', {"": [],
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": [],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": []
});

$.$defineNativeClass('Event', {"": ["type?"]
});

$.$defineNativeClass('EventException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["name!", "type?"]
});

$.$defineNativeClass('File', {"": [],
 is$File: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": [],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["length?", "position?"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length?", "position?"]
});

$.$defineNativeClass('Float32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'num');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": []
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length?", "name!"],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('HTMLFrameElement', {"": ["name!"]
});

$.$defineNativeClass('HTMLFrameSetElement', {"": ["cols?", "rows?"],
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('GainNode', {"": []
});

$.$defineNativeClass('Gamepad', {"": ["id?"]
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": []
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": []
});

$.$defineNativeClass('HTMLHeadingElement', {"": []
});

$.$defineNativeClass('HTMLHtmlElement', {"": []
});

$.$defineNativeClass('XMLHttpRequest', {"": [],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": ["position?"]
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": ["key?"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value?"]
});

$.$defineNativeClass('IDBDatabase', {"": [],
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": []
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": []
});

$.$defineNativeClass('IDBObjectStore', {"": [],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('IDBRequest', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": [],
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["name!"]
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["data?"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["name!", "x?", "y?"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); }
});

$.$defineNativeClass('HTMLInputElement', {"": ["list?", "name!", "pattern?", "type?", "value="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('Int16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": ["type?"]
});

$.$defineNativeClass('KeyboardEvent', {"": []
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["name!", "type?"]
});

$.$defineNativeClass('HTMLLIElement', {"": ["type?", "value="]
});

$.$defineNativeClass('HTMLLabelElement', {"": []
});

$.$defineNativeClass('HTMLLegendElement', {"": []
});

$.$defineNativeClass('HTMLLinkElement', {"": ["type?"]
});

$.$defineNativeClass('History', {"": ["length?"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {"": []
});

$.$defineNativeClass('DOMWindow', {"": ["name!", "navigator?"],
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 get$parent: function() {
  return $._convertNativeToDart_Window(this.get$_parent());
},
 get$_parent: function() {
  return this.parent;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name!"]
});

$.$defineNativeClass('HTMLMarqueeElement', {"": []
});

$.$defineNativeClass('MediaController', {"": ["duration?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": ["duration?"],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": []
});

$.$defineNativeClass('MediaList', {"": ["length?"]
});

$.$defineNativeClass('MediaQueryList', {"": []
});

$.$defineNativeClass('MediaSource', {"": ["duration?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": ["enabled!"],
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length?"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": []
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports?"],
 get$data: function() {
  return $._convertNativeToDart_SerializedScriptValue(this.get$_lib_data());
},
 get$_lib_data: function() {
  return this.data;
}
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name!"]
});

$.$defineNativeClass('Metadata', {"": []
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="]
});

$.$defineNativeClass('HTMLModElement', {"": []
});

$.$defineNativeClass('MouseEvent', {"": ["x?", "y?"]
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": ["type?"]
});

$.$defineNativeClass('NamedNodeMap', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent?"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('Node', {"": [],
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('NodeIterator', {"": ["root?"]
});

$.$defineNativeClass('NodeList', {"": ["_parent=", "length?"],
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Node');
},
 add$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._parent.$dom_appendChild$1(t2);
  }
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $.NotificationEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('OESElementIndexUint', {"": []
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": ["type?"]
});

$.$defineNativeClass('HTMLObjectElement', {"": ["data?", "name!", "type?"]
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": []
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="]
});

$.$defineNativeClass('OscillatorNode', {"": ["type?"]
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name!", "type?", "value="]
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('PannerNode', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": []
});

$.$defineNativeClass('HTMLParamElement', {"": ["name!", "type?", "value="]
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": ["type?"]
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": []
});

$.$defineNativeClass('HTMLPreElement', {"": []
});

$.$defineNativeClass('ProcessingInstruction', {"": ["data?"]
});

$.$defineNativeClass('HTMLProgressElement', {"": ["position?", "value="]
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": []
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": ["type?"]
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": []
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": []
});

$.$defineNativeClass('SQLError', {"": []
});

$.$defineNativeClass('SQLException', {"": []
});

$.$defineNativeClass('SQLResultSet', {"": ["rows?"]
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Map');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('SVGAElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": []
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": []
});

$.$defineNativeClass('SVGAnimateElement', {"": []
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": []
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": []
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGAnimatedLength');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGAnimatedNumber');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGAnimateTransformElement');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": []
});

$.$defineNativeClass('SVGCircleElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGClipPathElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": ["type?"]
});

$.$defineNativeClass('SVGCursorElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGDefsElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGDescElement', {"": []
});

$.$defineNativeClass('SVGDocument', {"": []
});

$.$defineNativeClass('SVGElement', {"": [],
 get$id: function() {
  return this.id;
}
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $.SVGElementInstanceEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('SVGEllipseElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["type?", "values?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": []
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEFuncAElement', {"": []
});

$.$defineNativeClass('SVGFEFuncBElement', {"": []
});

$.$defineNativeClass('SVGFEFuncGElement', {"": []
});

$.$defineNativeClass('SVGFEFuncRElement', {"": []
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": []
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x?", "y?", "z?"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x?", "y?", "z?"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["type?", "x?", "y?"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFontElement', {"": []
});

$.$defineNativeClass('SVGFontFaceElement', {"": []
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": []
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": []
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": []
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": []
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["x?", "y?", "transform?"]
});

$.$defineNativeClass('SVGGElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGGlyphElement', {"": []
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGGradientElement', {"": []
});

$.$defineNativeClass('SVGHKernElement', {"": []
});

$.$defineNativeClass('SVGImageElement', {"": ["x?", "y?", "transform?"]
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGLength');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGLinearGradientElement', {"": []
});

$.$defineNativeClass('SVGMPathElement', {"": []
});

$.$defineNativeClass('SVGMarkerElement', {"": []
});

$.$defineNativeClass('SVGMaskElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGMatrix', {"": []
});

$.$defineNativeClass('SVGMetadataElement', {"": []
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": []
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGNumber');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGPathSeg');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPatternElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGPolylineElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": []
});

$.$defineNativeClass('SVGRect', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGRectElement', {"": ["x?", "y?", "transform?"]
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGScriptElement', {"": ["type?"]
});

$.$defineNativeClass('SVGSetElement', {"": []
});

$.$defineNativeClass('SVGStopElement', {"": []
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["type?"]
});

$.$defineNativeClass('SVGSwitchElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGSymbolElement', {"": []
});

$.$defineNativeClass('SVGTRefElement', {"": []
});

$.$defineNativeClass('SVGTSpanElement', {"": []
});

$.$defineNativeClass('SVGTextContentElement', {"": []
});

$.$defineNativeClass('SVGTextElement', {"": ["transform?"]
});

$.$defineNativeClass('SVGTextPathElement', {"": []
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGTitleElement', {"": []
});

$.$defineNativeClass('SVGTransform', {"": ["type?"]
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGTransform');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["x?", "y?", "transform?"]
});

$.$defineNativeClass('SVGVKernElement', {"": []
});

$.$defineNativeClass('SVGViewElement', {"": []
});

$.$defineNativeClass('SVGViewSpec', {"": ["transform?"]
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('Screen', {"": []
});

$.$defineNativeClass('HTMLScriptElement', {"": ["type?"]
});

$.$defineNativeClass('ScriptProcessorNode', {"": [],
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": [],
 children$0: function() {
  return this.children();
},
 get$children: function() { return new $.BoundClosure4(this, 'children$0'); }
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "name!", "type?", "value="]
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": []
});

$.$defineNativeClass('ShadowRoot', {"": []
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SharedWorkerContext', {"": [],
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); }
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SourceBuffer');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["type?"]
});

$.$defineNativeClass('HTMLSpanElement', {"": []
});

$.$defineNativeClass('SpeechGrammar', {"": []
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SpeechGrammar');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": []
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": []
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length?"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key?"]
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": ["type?"]
});

$.$defineNativeClass('StyleMedia', {"": ["type?"]
});

$.$defineNativeClass('StyleSheet', {"": ["type?"]
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": []
});

$.$defineNativeClass('HTMLTableCellElement', {"": []
});

$.$defineNativeClass('HTMLTableColElement', {"": []
});

$.$defineNativeClass('HTMLTableElement', {"": ["rows?"]
});

$.$defineNativeClass('HTMLTableRowElement', {"": []
});

$.$defineNativeClass('HTMLTableSectionElement', {"": ["rows?"]
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["cols?", "name!", "rows?", "type?", "value="]
});

$.$defineNativeClass('TextEvent', {"": ["data?"]
});

$.$defineNativeClass('TextMetrics', {"": []
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id?", "position=", "text!"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'TextTrackCue');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length?"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'TextTrack');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length?"]
});

$.$defineNativeClass('HTMLTitleElement', {"": []
});

$.$defineNativeClass('Touch', {"": []
});

$.$defineNativeClass('TouchEvent', {"": []
});

$.$defineNativeClass('TouchList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Touch');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": []
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": ["root?"]
});

$.$defineNativeClass('UIEvent', {"": []
});

$.$defineNativeClass('HTMLUListElement', {"": ["type?"]
});

$.$defineNativeClass('Uint16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'int');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": []
});

$.$defineNativeClass('HTMLUnknownElement', {"": []
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": []
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["type?"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": []
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": []
});

$.$defineNativeClass('WebKitNamedFlow', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $.WorkerEvents$(this);
},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"": ["navigator?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 on$1: function(arg0) { return this.get$on().call$1(arg0); },
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent?"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'CSSRule');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'CSSValue');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'ClientRect');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'String');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Entry');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'EntrySync');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'File');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Gamepad');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'MediaStream');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SVGElementInstance');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SpeechInputResult');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'SpeechRecognitionResult');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'StyleSheet');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $._FixedSizeListIterator$(this, 'Animation');
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$map: function() { return new $.BoundClosure(this, 'map$1'); },
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

// 527 dynamic classes.
// 527 classes
// 41 !leaf
(function(){
  var v0/*class(Uint8Array)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v1/*class(AudioSourceNode)*/ = 'AudioSourceNode|OscillatorNode|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|OscillatorNode|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v2/*class(_CSSValueList)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v3/*class(SVGColor)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v4/*class(Text)*/ = 'Text|CDATASection|CDATASection';
  var v5/*class(SVGTextPositioningElement)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v6/*class(SVGTextContentElement)*/ = [v5/*class(SVGTextPositioningElement)*/,v5/*class(SVGTextPositioningElement)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v7/*class(SVGGradientElement)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v8/*class(SVGComponentTransferFunctionElement)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v9/*class(SVGAnimationElement)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v10/*class(SVGElement)*/ = [v6/*class(SVGTextContentElement)*/,v7/*class(SVGGradientElement)*/,v8/*class(SVGComponentTransferFunctionElement)*/,v9/*class(SVGAnimationElement)*/,v6/*class(SVGTextContentElement)*/,v7/*class(SVGGradientElement)*/,v8/*class(SVGComponentTransferFunctionElement)*/,v9/*class(SVGAnimationElement)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v11/*class(MediaElement)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v12/*class(MouseEvent)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v13/*class(UIEvent)*/ = [v12/*class(MouseEvent)*/,v12/*class(MouseEvent)*/,'UIEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent|TouchEvent|TextEvent|SVGZoomEvent|KeyboardEvent|CompositionEvent'].join('|');
  var v14/*class(ProgressEvent)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(Element)*/ = [v10/*class(SVGElement)*/,v11/*class(MediaElement)*/,v10/*class(SVGElement)*/,v11/*class(MediaElement)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(DocumentFragment)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v17/*class(Document)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v18/*class(CharacterData)*/ = [v4/*class(Text)*/,v4/*class(Text)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(WorkerContext)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(Node)*/ = [v15/*class(Element)*/,v16/*class(DocumentFragment)*/,v17/*class(Document)*/,v18/*class(CharacterData)*/,v15/*class(Element)*/,v16/*class(DocumentFragment)*/,v17/*class(Document)*/,v18/*class(CharacterData)*/,'Node|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr'].join('|');
  var v21/*class(MediaStream)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(IDBRequest)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(AbstractWorker)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['AbstractWorker', v23/*class(AbstractWorker)*/],
    ['Uint8Array', v0/*class(Uint8Array)*/],
    ['ArrayBufferView', [v0/*class(Uint8Array)*/,v0/*class(Uint8Array)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['AudioSourceNode', v1/*class(AudioSourceNode)*/],
    ['AudioNode', [v1/*class(AudioSourceNode)*/,v1/*class(AudioSourceNode)*/,'AudioNode|WaveShaperNode|ScriptProcessorNode|PannerNode|GainNode|DynamicsCompressorNode|DelayNode|ConvolverNode|ChannelSplitterNode|ChannelMergerNode|BiquadFilterNode|AudioDestinationNode|AnalyserNode|WaveShaperNode|ScriptProcessorNode|PannerNode|GainNode|DynamicsCompressorNode|DelayNode|ConvolverNode|ChannelSplitterNode|ChannelMergerNode|BiquadFilterNode|AudioDestinationNode|AnalyserNode'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['CSSValueList', v2/*class(_CSSValueList)*/],
    ['SVGColor', v3/*class(SVGColor)*/],
    ['CSSValue', [v2/*class(_CSSValueList)*/,v3/*class(SVGColor)*/,v2/*class(_CSSValueList)*/,v3/*class(SVGColor)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['Text', v4/*class(Text)*/],
    ['CharacterData', v18/*class(CharacterData)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['HTMLDocument', v17/*class(Document)*/],
    ['DocumentFragment', v16/*class(DocumentFragment)*/],
    ['SVGTextPositioningElement', v5/*class(SVGTextPositioningElement)*/],
    ['SVGTextContentElement', v6/*class(SVGTextContentElement)*/],
    ['SVGGradientElement', v7/*class(SVGGradientElement)*/],
    ['SVGComponentTransferFunctionElement', v8/*class(SVGComponentTransferFunctionElement)*/],
    ['SVGAnimationElement', v9/*class(SVGAnimationElement)*/],
    ['SVGElement', v10/*class(SVGElement)*/],
    ['HTMLMediaElement', v11/*class(MediaElement)*/],
    ['Element', v15/*class(Element)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['MouseEvent', v12/*class(MouseEvent)*/],
    ['UIEvent', v13/*class(UIEvent)*/],
    ['ProgressEvent', v14/*class(ProgressEvent)*/],
    ['Event', [v13/*class(UIEvent)*/,v14/*class(ProgressEvent)*/,v13/*class(UIEvent)*/,v14/*class(ProgressEvent)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['WorkerContext', v19/*class(WorkerContext)*/],
    ['Node', v20/*class(Node)*/],
    ['MediaStream', v21/*class(MediaStream)*/],
    ['IDBRequest', v22/*class(IDBRequest)*/],
    ['EventTarget', [v19/*class(WorkerContext)*/,v20/*class(Node)*/,v21/*class(MediaStream)*/,v22/*class(IDBRequest)*/,v23/*class(AbstractWorker)*/,v19/*class(WorkerContext)*/,v20/*class(Node)*/,v21/*class(MediaStream)*/,v22/*class(IDBRequest)*/,v23/*class(AbstractWorker)*/,'EventTarget|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|SVGElementInstance|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs'],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=clicker.dart.js.map